{"ast":null,"code":"var _jsxFileName = \"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/spotifyProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { UserContext } from './userProvider.js';\nimport { accessToken, getCurrentUserProfile } from '../spotify.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SpotifyContext = /*#__PURE__*/React.createContext();\nexport default function SpotifyProvider(props) {\n  _s();\n\n  // ** BETA get token and user from userState\n  // const [ spotifyToken, setSpotifyToken ] = useState(null);\n  // const [ spotifyProfile, setSpotifyProfile ] = useState(null);\n  // ** may need to edit spotify.js to save user info in localstorage.. or useEffect below to do it\n  const initState = {\n    spotifyUser: JSON.parse(localStorage.getItem('spotifyUser')) || {},\n    spotifyToken: localStorage.getItem('spotify_access_token') || null,\n    errMsg: ''\n  };\n  const [spotifyUserState, setSpotifyUserState] = useState(initState);\n  const {\n    logout\n  } = useContext(UserContext);\n  useEffect(() => {\n    if (accessToken) {\n      // ** BETA get token from userState\n      // setSpotifyToken(accessToken);\n      localStorage.setItem('spotify_access_token', accessToken);\n      setSpotifyUserState(prevState => ({ ...prevState,\n        spotifyToken: accessToken\n      }));\n\n      const fetchData = async () => {\n        try {\n          const {\n            data\n          } = await getCurrentUserProfile(); // setSpotifyProfile(data);\n          // where user information should be sent to back for use in model\n          // will need to reapply email each time on login\n          // just post to signup model route for new users\n\n          localStorage.setItem('spotifyUser', JSON.stringify(data));\n          setSpotifyUserState(prevState => ({ ...prevState,\n            spotifyUser: data\n          }));\n        } catch (err) {\n          // ** send error to auth handler\n          console.error(err);\n        }\n      };\n\n      fetchData();\n    } else if (!accessToken & spotifyUserState.spotifyToken) {\n      return;\n    } else if (!accessToken & !spotifyUserState.spotifyToken) {\n      logout();\n    }\n  }, [spotifyUserState.spotifyToken, logout]);\n  return /*#__PURE__*/_jsxDEV(SpotifyContext.Provider, {\n    value: { ...spotifyUserState\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SpotifyProvider, \"wstwZQ6yDHuGH9tG4XYy4u0H3EA=\");\n\n_c = SpotifyProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyProvider\");","map":{"version":3,"sources":["/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/spotifyProvider.js"],"names":["React","useEffect","useState","useContext","UserContext","accessToken","getCurrentUserProfile","SpotifyContext","createContext","SpotifyProvider","props","initState","spotifyUser","JSON","parse","localStorage","getItem","spotifyToken","errMsg","spotifyUserState","setSpotifyUserState","logout","setItem","prevState","fetchData","data","stringify","err","console","error","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,WAAT,EAAsBC,qBAAtB,QAAmD,eAAnD;;AAEA,OAAO,MAAMC,cAAc,gBAAGP,KAAK,CAACQ,aAAN,EAAvB;AAEP,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAAA;;AAC9C;AACI;AACA;AAEJ;AACI,QAAMC,SAAS,GAAG;AACdC,IAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,KAAmD,EADlD;AAEdC,IAAAA,YAAY,EAAEF,YAAY,CAACC,OAAb,CAAqB,sBAArB,KAAgD,IAFhD;AAGdE,IAAAA,MAAM,EAAE;AAHM,GAAlB;AAMA,QAAM,CAAEC,gBAAF,EAAoBC,mBAApB,IAA4ClB,QAAQ,CAACS,SAAD,CAA1D;AAEA,QAAM;AACFU,IAAAA;AADE,MAEFlB,UAAU,CAACC,WAAD,CAFd;AAKAH,EAAAA,SAAS,CAAC,MAAK;AACX,QAAGI,WAAH,EAAe;AACf;AACI;AACAU,MAAAA,YAAY,CAACO,OAAb,CAAqB,sBAArB,EAA6CjB,WAA7C;AACAe,MAAAA,mBAAmB,CAACG,SAAS,KAAK,EAC9B,GAAGA,SAD2B;AAE9BN,QAAAA,YAAY,EAAEZ;AAFgB,OAAL,CAAV,CAAnB;;AAIA,YAAMmB,SAAS,GAAG,YAAY;AAC9B,YAAI;AACA,gBAAM;AAAEC,YAAAA;AAAF,cAAW,MAAMnB,qBAAqB,EAA5C,CADA,CAEA;AACA;AACA;AACA;;AACAS,UAAAA,YAAY,CAACO,OAAb,CAAqB,aAArB,EAAoCT,IAAI,CAACa,SAAL,CAAeD,IAAf,CAApC;AACAL,UAAAA,mBAAmB,CAACG,SAAS,KAAK,EAC9B,GAAGA,SAD2B;AAE9BX,YAAAA,WAAW,EAAEa;AAFiB,WAAL,CAAV,CAAnB;AAIH,SAXD,CAWE,OAAME,GAAN,EAAW;AACT;AACAC,UAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AAAC,OAfF;;AAgBAH,MAAAA,SAAS;AACZ,KAzBD,MAyBO,IAAI,CAACnB,WAAD,GAAec,gBAAgB,CAACF,YAApC,EAAiD;AACpD;AACH,KAFM,MAEA,IAAI,CAACZ,WAAD,GAAe,CAACc,gBAAgB,CAACF,YAArC,EAAkD;AACrDI,MAAAA,MAAM;AACT;AACJ,GA/BQ,EA+BN,CAACF,gBAAgB,CAACF,YAAlB,EAECI,MAFD,CA/BM,CAAT;AAoCA,sBACI,QAAC,cAAD,CAAgB,QAAhB;AACI,IAAA,KAAK,EAAE,EACH,GAAGF;AADA,KADX;AAAA,cAIKT,KAAK,CAACoB;AAJX;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GA/DuBrB,e;;KAAAA,e","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { UserContext } from './userProvider.js';\nimport { accessToken, getCurrentUserProfile } from '../spotify.js';\n\nexport const SpotifyContext = React.createContext();\n\nexport default function SpotifyProvider(props){\n// ** BETA get token and user from userState\n    // const [ spotifyToken, setSpotifyToken ] = useState(null);\n    // const [ spotifyProfile, setSpotifyProfile ] = useState(null);\n\n// ** may need to edit spotify.js to save user info in localstorage.. or useEffect below to do it\n    const initState = {\n        spotifyUser: JSON.parse(localStorage.getItem('spotifyUser')) || {},\n        spotifyToken: localStorage.getItem('spotify_access_token') || null,\n        errMsg: ''\n    };\n\n    const [ spotifyUserState, setSpotifyUserState ] = useState(initState)\n\n    const {\n        logout\n    } = useContext(UserContext)\n\n\n    useEffect(()=> {\n        if(accessToken){\n        // ** BETA get token from userState\n            // setSpotifyToken(accessToken);\n            localStorage.setItem('spotify_access_token', accessToken)\n            setSpotifyUserState(prevState => ({\n                ...prevState,\n                spotifyToken: accessToken\n            }))\n            const fetchData = async () => {\n            try {\n                const { data } = await getCurrentUserProfile();\n                // setSpotifyProfile(data);\n                // where user information should be sent to back for use in model\n                // will need to reapply email each time on login\n                // just post to signup model route for new users\n                localStorage.setItem('spotifyUser', JSON.stringify(data))\n                setSpotifyUserState(prevState => ({\n                    ...prevState,\n                    spotifyUser: data\n                }))\n            } catch(err) {\n                // ** send error to auth handler\n                console.error(err);\n            }}\n            fetchData();\n        } else if (!accessToken & spotifyUserState.spotifyToken){\n            return;\n        } else if (!accessToken & !spotifyUserState.spotifyToken){\n            logout();\n        }\n    }, [spotifyUserState.spotifyToken\n        , \n        logout\n    ])\n    \n    return(\n        <SpotifyContext.Provider\n            value={{\n                ...spotifyUserState\n            }}>\n            {props.children}\n        </SpotifyContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}