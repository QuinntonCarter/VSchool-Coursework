{"ast":null,"code":"import axios from 'axios';\nconst spotifyUserAPI = axios.create(); // declare localStorage keys\n\nexport const LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n}; // retrieve localStorage values\n\nexport const LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n/**\n * Clear out all localStorage items we've set and reload the page\n */\n\nexport const logout = () => {\n  // Clear all localStorage items\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  } // Navigate to homepage\n\n\n  window.location = window.location.origin;\n};\n/**\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\n * and now is greater than the expiration time of 3600 seconds (1 hour).\n */\n\nconst hasTokenExpired = () => {\n  const {\n    accessToken,\n    timestamp,\n    expireTime\n  } = LOCALSTORAGE_VALUES;\n\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n\n  const millisecondsElapsed = Date.now() - Number(timestamp);\n  return millisecondsElapsed / 1000 > Number(expireTime);\n};\n/**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n */\n\n\nconst refreshToken = async () => {\n  try {\n    // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n    if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === 'undefined' || Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000) {\n      console.error('No refresh token available');\n      logout();\n    } // Use `/refresh_token` endpoint from our Node app\n\n\n    const {\n      data\n    } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`); // Update localStorage values\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); // Reload the page for localStorage updates to be reflected\n\n    window.location.reload();\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error'); // If there's an error OR the token in localStorage has expired, refresh the token\n\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    // refreshToken();\n    // *** TEST LOGOUT INSTEAD OF REFRESH ***\n    logout();\n  } // If there is a valid access token in localStorage, use that\n\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  } // If there is a token in the URL query params, user is logging in for the first time\n\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    } // Set timestamp to keys\n\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); // Return access token from query params\n\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  }\n\n  return false;\n};\n\nexport const accessToken = getAccessToken();\nspotifyUserAPI.interceptors.request.use(config => {\n  config.headers.Authorization = `Bearer ${accessToken}`;\n  config.baseURL = 'https://api.spotify.com/v1';\n  return config;\n});\nexport const getCurrentUserProfile = () => spotifyUserAPI.get('/me'); // ** either by selection => album/ep etc name or song name\n\nexport const getSearchBy = (artist, selection) => spotifyUserAPI.get(`/search?q=name:${artist}type=${selection}`); // **\n\nexport const getArtistTracks = artistID => spotifyUserAPI.get(`/artist/`);\nexport const getArtistAlbum = artistID => spotifyUserAPI.get(`/artists/${artistID}/albums`);\nexport const getAlbumTracks = albumID => spotifyUserAPI.get(`/artists/${albumID}`);\nexport const getUserTopTracks = () => spotifyUserAPI.get(`/me/top/tracks?limit=3&time_range=short_term`);","map":{"version":3,"sources":["/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/spotify.js"],"names":["axios","spotifyUserAPI","create","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","logout","property","removeItem","location","origin","hasTokenExpired","millisecondsElapsed","Date","now","Number","console","error","data","get","setItem","access_token","reload","e","getAccessToken","queryString","search","urlParams","URLSearchParams","queryParams","hasError","interceptors","request","use","config","headers","Authorization","baseURL","getCurrentUserProfile","getSearchBy","artist","selection","getArtistTracks","artistID","getArtistAlbum","getAlbumTracks","albumID","getUserTopTracks"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst spotifyUserAPI = axios.create();\n\n// declare localStorage keys\nexport const LOCALSTORAGE_KEYS = {\n    accessToken: 'spotify_access_token',\n    refreshToken: 'spotify_refresh_token',\n    expireTime: 'spotify_token_expire_time',\n    timestamp: 'spotify_token_timestamp',\n}\n\n// retrieve localStorage values\nexport const LOCALSTORAGE_VALUES = {\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n    refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n    expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n    timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n};\n\n/**\n * Clear out all localStorage items we've set and reload the page\n */\nexport const logout = () => {\n    // Clear all localStorage items\n    for (const property in LOCALSTORAGE_KEYS) {\n        window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n    }\n    // Navigate to homepage\n    window.location = window.location.origin;\n};\n\n/**\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\n * and now is greater than the expiration time of 3600 seconds (1 hour).\n */\nconst hasTokenExpired = () => {\n    const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES;\n    if (!accessToken || !timestamp) {\n        return false;\n    }\n    const millisecondsElapsed = Date.now() - Number(timestamp);\n    return (millisecondsElapsed / 1000) > Number(expireTime);\n};\n\n/**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n */\nconst refreshToken = async () => {\n    try {\n      // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n        if (!LOCALSTORAGE_VALUES.refreshToken ||\n        LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\n        (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\n        ) {\n        console.error('No refresh token available');\n        logout();\n        }\n\n      // Use `/refresh_token` endpoint from our Node app\n        const { data } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\n\n      // Update localStorage values\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n\n      // Reload the page for localStorage updates to be reflected\n        window.location.reload();\n\n    } catch(e) {\n        console.error(e);\n    }\n};\n\nconst getAccessToken = () => {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const queryParams = {\n        [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n        [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n        [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\n    };\n    const hasError = urlParams.get('error');\n\n    // If there's an error OR the token in localStorage has expired, refresh the token\n    if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n        // refreshToken();\n        // *** TEST LOGOUT INSTEAD OF REFRESH ***\n        logout();\n    }\n\n    // If there is a valid access token in localStorage, use that\n    if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n        return LOCALSTORAGE_VALUES.accessToken;\n    }\n\n    // If there is a token in the URL query params, user is logging in for the first time\n    if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n      // Store the query params in localStorage\n        for (const property in queryParams) {\n        window.localStorage.setItem(property, queryParams[property]);\n        }\n      // Set timestamp to keys\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n      // Return access token from query params\n        return queryParams[LOCALSTORAGE_KEYS.accessToken];\n    }\n\n    return false;\n}\n\nexport const accessToken = getAccessToken();\n\nspotifyUserAPI.interceptors.request.use(config => {\n    config.headers.Authorization = `Bearer ${accessToken}`\n    config.baseURL = 'https://api.spotify.com/v1'\n    return config\n});\n\nexport const getCurrentUserProfile = () => spotifyUserAPI.get('/me');\n// ** either by selection => album/ep etc name or song name\nexport const getSearchBy = (artist, selection) => spotifyUserAPI.get(`/search?q=name:${artist}type=${selection}`);\n// **\nexport const getArtistTracks = (artistID) => spotifyUserAPI.get(`/artist/`) \nexport const getArtistAlbum = (artistID) => spotifyUserAPI.get(`/artists/${artistID}/albums`);\nexport const getAlbumTracks = (albumID) => spotifyUserAPI.get(`/artists/${albumID}`)\nexport const getUserTopTracks = () => spotifyUserAPI.get(`/me/top/tracks?limit=3&time_range=short_term`);"]},"metadata":{},"sourceType":"module"}