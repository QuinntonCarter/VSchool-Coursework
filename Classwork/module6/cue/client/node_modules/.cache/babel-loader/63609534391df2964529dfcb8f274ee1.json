{"ast":null,"code":"var _jsxFileName = \"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/userProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // ** refactor w user CRUD actions **\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nconst userAxios = axios.create();\nuserAxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\nexport default function UserProvider(props) {\n  _s();\n\n  const initState = {\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    token: localStorage.getItem('token') || '',\n    lists: [],\n    recentMood: {},\n    friendPosts: [{}],\n    errMsg: ''\n  };\n  const initSpotifyState = {\n    spotifyUser: JSON.parse(localStorage.getItem('spotifyUser')) || null,\n    spotifyToken: localStorage.getItem('spotify_access_token') || '',\n    errMsg: ''\n  };\n  const [spotifyUserState, setSpotifyUserState] = useState(initSpotifyState);\n  const [userState, setUserState] = useState(initState); // for auth\n\n  function signup(credentials) {\n    axios.post('/auth/signup', credentials).then(res => {\n      const {\n        user,\n        token\n      } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      setUserState(prevUserState => ({ ...prevUserState,\n        user,\n        token\n      }));\n    }).catch(err => handleAuthError(err.response.data.errMsg));\n  }\n\n  ;\n\n  function login(credentials) {\n    const parsedInputs = {\n      username: credentials.username.split(' ').join('_'),\n      password: credentials.password\n    };\n    axios.post('/auth/login', parsedInputs).then(res => {\n      const {\n        user,\n        token\n      } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      setUserState(prevUserState => ({ ...prevUserState,\n        user,\n        token\n      }));\n    }).catch(err => handleAuthError(err.response.data.errMsg));\n  }\n\n  ;\n\n  function logout() {\n    setUserState({\n      user: {},\n      token: ''\n    });\n    localStorage.clear();\n  }\n\n  ; //err\n\n  function handleAuthError(errMsg) {\n    setUserState(prevState => ({ ...prevState,\n      errMsg\n    }));\n  }\n\n  ;\n\n  function resetAuthError() {\n    setUserState(prevState => ({ ...prevState,\n      errMsg: ''\n    }));\n  }\n\n  ;\n\n  const shareItem = async list => {\n    if (list.type === 'playlist') {\n      const {\n        data\n      } = await userAxios.post(`/app/lists`, list).then(() => setUserState(prevState => ({ ...prevState,\n        lists: [data]\n      }))).catch(err => console.log(err));\n    } else {\n      const {\n        data\n      } = await userAxios.post(`/app/moods`, list).then(() => setUserState(prevState => ({ ...prevState,\n        recentMood: data\n      }))).catch(err => console.log(err));\n    }\n  };\n\n  const updateFollowStatus = async id => {\n    const areFriends = userState.user.friends.includes(id);\n\n    if (areFriends === true) {\n      const {\n        data\n      } = await userAxios.post('/app/users/friends', {\n        params: {\n          type: 'unfollow'\n        }\n      });\n      console.log(data).then(res => setUserState({\n        user: {\n          friends: [res.data]\n        }\n      })).catch(err => console.log(err));\n    } else if (areFriends === false) {\n      const {\n        data\n      } = await userAxios.post('/app/users/friends', {\n        params: {\n          type: 'follow'\n        }\n      });\n      console.log(data); // .then(res => setUserState(prevState => ({\n      //     ...prevState,\n      //     friends: res.data\n      // })))\n      // .catch(err => console.log(err))\n    }\n  }; // CRUD\n  // get all posts in DB\n\n\n  const getFriendsStatus = () => {\n    userState.user.friends.forEach(item => userAxios.get('/app/moods', {\n      params: {\n        id: item\n      }\n    }).then(res => setUserState(prevState => ({ ...prevState,\n      friendPosts: [res.data]\n    }))).catch(err => console.log(err)));\n  }; // get usersPosts **\n\n\n  const getUserPosts = async () => {\n    const {\n      data\n    } = await userAxios.get(`/app/users/${userState.user._id}`, {\n      params: {\n        type: 'status'\n      }\n    }); // .then(res => {\n\n    console.log(data); // setUserState(prevState => ({\n    //     ...prevState,\n    //     recentMood: res.data.mood,\n    //     lists: res.data.lists\n    // }))\n    // })\n    // .catch(err => console.log(err.response.data.errMsg))\n  };\n\n  useEffect(() => {\n    console.log(userState.user);\n  }, [userState]); // new post POST\n  // function addPost(newPost){\n  // userAxios.post('/api/posts', newPost)\n  // .then(res => {\n  //     setUserState(prevState => ({\n  //         ...prevState,\n  //         allPosts: [...prevState.allPosts, res.data]\n  //     }))\n  // })\n  // .catch(err => console.log(err.response.data.errMsg))\n  // };\n  // DELETE post\n  // function deletePost(postId){\n  //     userAxios.delete(`/api/posts/${postId}`)\n  //     .then(res => console.log(res.data))\n  //     .catch(err => console.log(err))\n  //     .finally(getAllPosts())\n  // }\n  // voting functionality\n  // function submitVote(vote, userId, postId){\n  //     userId === userState.user._id ?\n  //     console.log('Error: this is your own post or comment')\n  //     :\n  //     userAxios.put(`/api/posts/${vote}/${postId}`)\n  //     .then(res => console.log(res.data))\n  //     .catch(err => console.log(err.response.data.errMsg))\n  //     .finally(getAllPosts())\n  // }\n  // comments CRUD\n  // GET all comments by user\n  // function getUserComm(userId){\n  //     userAxios.get(`/api/comment/user/${userId}`)\n  //     .then(res => {\n  //         setUserState(prevState => ({\n  //             ...prevState,\n  //             comments: res.data\n  //         }))\n  //     })\n  //     .catch(err => console.log(err.response.data.errMsg))\n  // };\n  // POST comment\n  // function postComment(postId, newComment){\n  //     userAxios.put(`/api/comment/${postId}`, newComment)\n  //     .then(res => console.log(res.data))\n  //     .catch(err => console.log(err.response.data.errMsg))\n  //     .finally(getAllPosts())\n  // }\n  // DELETE comment ** check **\n  // function deleteComment(postId, comId){\n  // userAxios.put(`/api/${postId}/${comId}`)\n  // .then(res => {\n  //     setUserState(prevState => ({\n  //         ...prevState,\n  //         allPosts: [...prevState.allPosts, res.data]\n  //     }))\n  // })\n  // .catch(err => console.log(err.response.data.errMsg))\n  // .finally(getAllPosts())\n  // }\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: { ...userState,\n      ...spotifyUserState,\n      setSpotifyUserState,\n      signup,\n      login,\n      logout,\n      userAxios,\n      shareItem,\n      updateFollowStatus,\n      getFriendsStatus,\n      getUserPosts,\n      // deletePost,\n      // getAllPosts,\n      resetAuthError\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserProvider, \"I7hBp2x75/ub41pWg7V5EkQclhw=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/userProvider.js"],"names":["React","useState","useEffect","axios","UserContext","createContext","userAxios","create","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","UserProvider","props","initState","user","JSON","parse","lists","recentMood","friendPosts","errMsg","initSpotifyState","spotifyUser","spotifyToken","spotifyUserState","setSpotifyUserState","userState","setUserState","signup","credentials","post","then","res","data","setItem","stringify","prevUserState","catch","err","handleAuthError","response","login","parsedInputs","username","split","join","password","logout","clear","prevState","resetAuthError","shareItem","list","type","console","log","updateFollowStatus","id","areFriends","friends","includes","params","getFriendsStatus","forEach","item","get","getUserPosts","_id","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// ** refactor w user CRUD actions **\n\nexport const UserContext = React.createContext();\n\nconst userAxios = axios.create();\nuserAxios.interceptors.request.use(config => {\n    const token = localStorage.getItem('token')\n    config.headers.Authorization = `Bearer ${token}`\n    return config\n});\n\nexport default function UserProvider(props){\n    const initState = {\n        user: JSON.parse(localStorage.getItem('user')) || null,\n        token: localStorage.getItem('token') || '',\n        lists: [],\n        recentMood: {},\n        friendPosts: [{}],\n        errMsg: ''\n    };\n\n    const initSpotifyState = {\n        spotifyUser: JSON.parse(localStorage.getItem('spotifyUser')) || null,\n        spotifyToken: localStorage.getItem('spotify_access_token') || '',\n        errMsg: ''\n    };\n\n    const [ spotifyUserState, setSpotifyUserState ] = useState(initSpotifyState);\n\n    const [ userState, setUserState ] = useState(initState);\n\n// for auth\n    function signup(credentials){\n        axios.post('/auth/signup', credentials)\n        .then(res => {\n            const { user, token } = res.data\n            localStorage.setItem('token', token)\n            localStorage.setItem('user', JSON.stringify(user))\n            setUserState(prevUserState => ({\n                ...prevUserState,\n                user,\n                token\n            }))\n        })\n        .catch(err => handleAuthError(err.response.data.errMsg))\n    };\n\n    function login(credentials){\n        const parsedInputs = {\n            username: credentials.username.split(' ').join('_'),\n            password: credentials.password\n        }\n        axios.post('/auth/login', parsedInputs)\n        .then(res => {\n            const { user, token } = res.data\n            localStorage.setItem('token', token)\n            localStorage.setItem('user', JSON.stringify(user))\n            setUserState(prevUserState => ({\n                ...prevUserState,\n                user,\n                token\n            }))\n        })\n        .catch(err => handleAuthError(err.response.data.errMsg))\n    };\n\n    function logout(){\n        setUserState({\n            user: {},\n            token: '',\n        });\n        localStorage.clear()\n    };\n\n    //err\n    function handleAuthError(errMsg){\n        setUserState(prevState => ({\n            ...prevState,\n            errMsg\n        }))\n    };\n\n    function resetAuthError(){\n        setUserState(prevState => ({\n            ...prevState,\n            errMsg: ''\n        }))\n    };\n\n    const shareItem = async (list) => {\n        if(list.type === 'playlist'){\n            const { data } = await userAxios.post(`/app/lists`, list)\n            .then(() => setUserState(prevState => ({...prevState, lists: [data]})))\n            .catch(err => console.log(err))\n        } else {\n            const { data } = await userAxios.post(`/app/moods`, list)\n            .then(() => setUserState(prevState => ({...prevState, recentMood: data})))\n            .catch(err => console.log(err))\n        }\n    };\n\n    const updateFollowStatus = async (id) => {\n        const areFriends = userState.user.friends.includes(id)\n        if(areFriends === true){\n            const { data } = await userAxios.post('/app/users/friends', {\n                params: {\n                    type: 'unfollow'\n                }\n            })\n            console.log(data)\n            .then(res => \n            setUserState({ \n                user: { friends:\n                    [res.data]}}))\n            .catch(err => console.log(err))\n        } else if(areFriends === false){\n            const { data } = await userAxios.post('/app/users/friends', {\n                params: {\n                    type: 'follow'\n                }\n            })\n            console.log(data)\n            // .then(res => setUserState(prevState => ({\n            //     ...prevState,\n            //     friends: res.data\n            // })))\n            // .catch(err => console.log(err))\n        }\n    };\n\n// CRUD\n// get all posts in DB\n    const getFriendsStatus = () => {\n        userState.user.friends.forEach(item => \n            userAxios.get('/app/moods', {\n                params: {\n                    id: item\n                }\n            })\n            .then(res => \n                setUserState(prevState => ({\n                    ...prevState, \n                    friendPosts: [res.data]})))\n            .catch(err => console.log(err))\n        )\n    };\n\n// get usersPosts **\n    const getUserPosts = async () => {\n        const { data } = await userAxios.get(`/app/users/${userState.user._id}`, {\n            params: {\n                type: 'status'\n            }\n        })\n        // .then(res => {\n            console.log(data)\n            // setUserState(prevState => ({\n            //     ...prevState,\n            //     recentMood: res.data.mood,\n            //     lists: res.data.lists\n            // }))\n        // })\n        // .catch(err => console.log(err.response.data.errMsg))\n    };\n\n    useEffect(() => {\n        console.log(userState.user)\n    }, [userState])\n\n// new post POST\n    // function addPost(newPost){\n        // userAxios.post('/api/posts', newPost)\n        // .then(res => {\n        //     setUserState(prevState => ({\n        //         ...prevState,\n        //         allPosts: [...prevState.allPosts, res.data]\n        //     }))\n        // })\n        // .catch(err => console.log(err.response.data.errMsg))\n    // };\n\n// DELETE post\n    // function deletePost(postId){\n    //     userAxios.delete(`/api/posts/${postId}`)\n    //     .then(res => console.log(res.data))\n    //     .catch(err => console.log(err))\n    //     .finally(getAllPosts())\n    // }\n\n// voting functionality\n    // function submitVote(vote, userId, postId){\n    //     userId === userState.user._id ?\n    //     console.log('Error: this is your own post or comment')\n    //     :\n    //     userAxios.put(`/api/posts/${vote}/${postId}`)\n    //     .then(res => console.log(res.data))\n    //     .catch(err => console.log(err.response.data.errMsg))\n    //     .finally(getAllPosts())\n    // }\n\n// comments CRUD\n// GET all comments by user\n    // function getUserComm(userId){\n    //     userAxios.get(`/api/comment/user/${userId}`)\n    //     .then(res => {\n    //         setUserState(prevState => ({\n    //             ...prevState,\n    //             comments: res.data\n    //         }))\n    //     })\n    //     .catch(err => console.log(err.response.data.errMsg))\n    // };\n\n// POST comment\n    // function postComment(postId, newComment){\n    //     userAxios.put(`/api/comment/${postId}`, newComment)\n    //     .then(res => console.log(res.data))\n    //     .catch(err => console.log(err.response.data.errMsg))\n    //     .finally(getAllPosts())\n    // }\n\n// DELETE comment ** check **\n    // function deleteComment(postId, comId){\n        // userAxios.put(`/api/${postId}/${comId}`)\n        // .then(res => {\n        //     setUserState(prevState => ({\n        //         ...prevState,\n        //         allPosts: [...prevState.allPosts, res.data]\n        //     }))\n        // })\n        // .catch(err => console.log(err.response.data.errMsg))\n        // .finally(getAllPosts())\n    // }\n\n    return(\n        <UserContext.Provider\n        value={{\n            ...userState,\n            ...spotifyUserState,\n            setSpotifyUserState,\n            signup,\n            login,\n            logout,\n            userAxios,\n            shareItem,\n            updateFollowStatus,\n            getFriendsStatus,\n            getUserPosts,\n            // deletePost,\n            // getAllPosts,\n            resetAuthError\n        }}>\n            {props.children}\n        </UserContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}