{"ast":null,"code":"var _jsxFileName = \"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/spotifyProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { UserContext } from './userProvider.js'; // ** might be broken, vscode is acting weird: also check Auth.js for problems\n\nimport { accessToken, getCurrentUserProfile } from '../spotify.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SpotifyContext = /*#__PURE__*/React.createContext();\nexport default function SpotifyProvider(props) {\n  _s();\n\n  const spotifyToken = useState();\n  const [spotifyProfile, setSpotifyProfile] = useState(null); // ** refactor this to work from this page and save some info into local state for use like userProvider\n  // ** may need to edit spotify.js to save user info in localstorage.. or useEffect below to do it\n\n  const initState = {\n    spotifyUser: JSON.parse(localStorage.getItem('spotifyUser')) || {},\n    spotifyToken: localStorage.getItem('spotify_access_token') || '',\n    errMsg: ''\n  };\n  const [spotifyUserState, setSpotifyUserState] = useState(initState);\n  const {\n    logout\n  } = useContext(UserContext);\n  useEffect(() => {\n    if (accessToken) {\n      setSpotifyToken(accessToken);\n      localStorage.setItem('spotify_access_token', accessToken);\n\n      const fetchData = async () => {\n        try {\n          // where user data comes in\n          const {\n            data\n          } = await getCurrentUserProfile();\n          setSpotifyProfile(data); // where user information should be sent to back for use in model\n          // will need to reapply email each time on login\n          // just post to signup model route for new users\n\n          localStorage.setItem('spotifyUser', JSON.stringify(data));\n        } catch (err) {\n          console.error(err);\n        }\n      };\n\n      fetchData();\n    } else if (!accessToken & spotifyToken) {\n      return;\n    } else if (!accessToken & !spotifyToken) {\n      logout();\n    }\n  }, [spotifyToken, setSpotifyProfile, logout]);\n  return /*#__PURE__*/_jsxDEV(SpotifyContext.Provider, {\n    value: {\n      spotifyProfile,\n      spotifyToken,\n      setSpotifyToken\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SpotifyProvider, \"LD5dBLbkVaHzDv1n6Xiwy8EKQqo=\");\n\n_c = SpotifyProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyProvider\");","map":{"version":3,"sources":["/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/spotifyProvider.js"],"names":["React","useEffect","useState","useContext","UserContext","accessToken","getCurrentUserProfile","SpotifyContext","createContext","SpotifyProvider","props","spotifyToken","spotifyProfile","setSpotifyProfile","initState","spotifyUser","JSON","parse","localStorage","getItem","errMsg","spotifyUserState","setSpotifyUserState","logout","setSpotifyToken","setItem","fetchData","data","stringify","err","console","error","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,mBAA5B,C,CACA;;AACA,SAASC,WAAT,EAAsBC,qBAAtB,QAAmD,eAAnD;;AAEA,OAAO,MAAMC,cAAc,gBAAGP,KAAK,CAACQ,aAAN,EAAvB;AAEP,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAAA;;AAC1C,QAAMC,YAAY,GAAGT,QAAQ,EAA7B;AACA,QAAM,CAAEU,cAAF,EAAkBC,iBAAlB,IAAwCX,QAAQ,CAAC,IAAD,CAAtD,CAF0C,CAI9C;AACA;;AACI,QAAMY,SAAS,GAAG;AACdC,IAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,KAAmD,EADlD;AAEdR,IAAAA,YAAY,EAAEO,YAAY,CAACC,OAAb,CAAqB,sBAArB,KAAgD,EAFhD;AAGdC,IAAAA,MAAM,EAAE;AAHM,GAAlB;AAMA,QAAM,CAAEC,gBAAF,EAAoBC,mBAApB,IAA4CpB,QAAQ,CAACY,SAAD,CAA1D;AAEA,QAAM;AACFS,IAAAA;AADE,MAEFpB,UAAU,CAACC,WAAD,CAFd;AAKAH,EAAAA,SAAS,CAAC,MAAK;AACX,QAAGI,WAAH,EAAe;AACXmB,MAAAA,eAAe,CAACnB,WAAD,CAAf;AACAa,MAAAA,YAAY,CAACO,OAAb,CAAqB,sBAArB,EAA6CpB,WAA7C;;AAEA,YAAMqB,SAAS,GAAG,YAAY;AAC9B,YAAI;AACA;AACA,gBAAM;AAAEC,YAAAA;AAAF,cAAW,MAAMrB,qBAAqB,EAA5C;AACAO,UAAAA,iBAAiB,CAACc,IAAD,CAAjB,CAHA,CAIA;AACA;AACA;;AACAT,UAAAA,YAAY,CAACO,OAAb,CAAqB,aAArB,EAAoCT,IAAI,CAACY,SAAL,CAAeD,IAAf,CAApC;AAEH,SATD,CASE,OAAME,GAAN,EAAW;AACTC,UAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AAEH;AACA,OAdD;;AAeAH,MAAAA,SAAS;AACZ,KApBD,MAoBO,IAAI,CAACrB,WAAD,GAAeM,YAAnB,EAAiC;AACpC;AACH,KAFM,MAEA,IAAI,CAACN,WAAD,GAAe,CAACM,YAApB,EAAiC;AACpCY,MAAAA,MAAM;AACT;AACJ,GA1BQ,EA0BN,CAACZ,YAAD,EAAeE,iBAAf,EAAkCU,MAAlC,CA1BM,CAAT;AA4BA,sBACI,QAAC,cAAD,CAAgB,QAAhB;AACI,IAAA,KAAK,EAAE;AACHX,MAAAA,cADG;AAEHD,MAAAA,YAFG;AAGHa,MAAAA;AAHG,KADX;AAAA,cAMKd,KAAK,CAACsB;AANX;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAzDuBvB,e;;KAAAA,e","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { UserContext } from './userProvider.js';\n// ** might be broken, vscode is acting weird: also check Auth.js for problems\nimport { accessToken, getCurrentUserProfile } from '../spotify.js';\n\nexport const SpotifyContext = React.createContext();\n\nexport default function SpotifyProvider(props){\n    const spotifyToken = useState();\n    const [ spotifyProfile, setSpotifyProfile ] = useState(null);\n\n// ** refactor this to work from this page and save some info into local state for use like userProvider\n// ** may need to edit spotify.js to save user info in localstorage.. or useEffect below to do it\n    const initState = {\n        spotifyUser: JSON.parse(localStorage.getItem('spotifyUser')) || {},\n        spotifyToken: localStorage.getItem('spotify_access_token') || '',\n        errMsg: ''\n    };\n\n    const [ spotifyUserState, setSpotifyUserState ] = useState(initState)\n\n    const {\n        logout\n    } = useContext(UserContext)\n\n\n    useEffect(()=> {\n        if(accessToken){\n            setSpotifyToken(accessToken);\n            localStorage.setItem('spotify_access_token', accessToken)\n    \n            const fetchData = async () => {\n            try {\n                // where user data comes in\n                const { data } = await getCurrentUserProfile();\n                setSpotifyProfile(data);\n                // where user information should be sent to back for use in model\n                // will need to reapply email each time on login\n                // just post to signup model route for new users\n                localStorage.setItem('spotifyUser', JSON.stringify(data))\n\n            } catch(err) {\n                console.error(err);\n    \n            }\n            }\n            fetchData();\n        } else if (!accessToken & spotifyToken) {\n            return;\n        } else if (!accessToken & !spotifyToken){\n            logout();\n        }\n    }, [spotifyToken, setSpotifyProfile, logout])\n    \n    return(\n        <SpotifyContext.Provider\n            value={{\n                spotifyProfile,\n                spotifyToken,\n                setSpotifyToken\n            }}>\n            {props.children}\n        </SpotifyContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}