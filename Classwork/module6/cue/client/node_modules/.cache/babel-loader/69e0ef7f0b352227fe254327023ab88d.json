{"ast":null,"code":"var _jsxFileName = \"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/appContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { accessToken } from '../spotify.js';\nimport { UserContext } from './userProvider.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/React.createContext();\nexport default function AppContextProvider(props) {\n  _s();\n\n  const spotifyUserAPI = axios.create();\n  spotifyUserAPI.interceptors.request.use(config => {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n    config.baseURL = 'https://api.spotify.com/v1';\n    return config;\n  });\n  const {\n    userAxios\n  } = useContext(UserContext);\n  const [monthlyArtists, setMonthlyArtists] = useState({});\n  const [monthlyTracks, setMonthlyTracks] = useState({});\n  const [found, setFound] = useState([]);\n  const [playlists, setPlaylists] = useState({\n    items: [],\n    total: 0\n  });\n  const [playlistTracks, setPlaylistTracks] = useState([]);\n  const [selectedItem, setSelectedItem] = useState({});\n\n  const search = inputs => {\n    const parseInputs = inputs.split(' ').join('_');\n    userAxios.get(`/app/users`, {\n      params: {\n        inputs: parseInputs,\n        type: 'friend'\n      }\n    }).then(res => setFound(res.data)).catch(err => console.log(err));\n  };\n\n  const getSelection = (id, location) => {\n    setFound();\n    userAxios.get(`/app/users`, {\n      params: {\n        id: id,\n        type: location\n      }\n    }).then(res => setSelectedItem(res.data)).catch(err => console.log(err));\n  };\n\n  const getCurrentUserTop = async (type, limit, time_range) => {\n    const {\n      data\n    } = await spotifyUserAPI.get(`/me/top/${type}`, {\n      params: {\n        limit: limit,\n        time_range: time_range\n      }\n    });\n    return data;\n  };\n\n  const getPlaylists = async id => {\n    const {\n      data\n    } = await spotifyUserAPI.get(`/users/${id}/playlists`, {\n      params: {\n        limit: 50\n      }\n    }); // filter out spotify owned\n\n    const collected = data.items.filter(item => item.owner.display_name !== 'Spotify');\n    return collected;\n  }; // for finding overall playlist analysis data; id = playlistId **\n\n\n  const getPlaylistTracks = async id => {\n    const {\n      data\n    } = await spotifyUserAPI.get(`/playlists/${id}/tracks`);\n    setPlaylistTracks(data);\n  }; // share posts depending on type\n\n\n  const shareItem = async (list, timeframe) => {\n    if (list.type === 'playlist') {\n      userAxios.post(`/app/lists`, list, {\n        params: {\n          time: timeframe\n        }\n      }).then(res => setUserState(prevState => ({ ...prevState,\n        lists: [res.data]\n      }))).catch(err => console.log(err));\n    } else {\n      userAxios.post(`/app/moods/${timeframe}`, list).then(res => setUserState(prevState => ({ ...prevState,\n        recentMood: [res.data]\n      }))).catch(err => console.log(err));\n    }\n  }; // follow and unfollow\n\n\n  const updateFollowStatus = (id, type) => {\n    userAxios.post(`/app/users/friends`, {\n      params: {\n        type: type,\n        id: id\n      }\n    }).then(res => setUserState(prevState => ({ ...prevState,\n      user: res.data\n    }))).catch(err => console.log(err));\n  }; // get all friends' posts in DB **\n\n\n  const getStatus = async type => {\n    if (type === 'user') {\n      const {\n        data\n      } = await userAxios.get(`/app/moods`, {\n        params: {\n          type: type\n        }\n      });\n      return data;\n    } else if (type === 'friends') {\n      const {\n        data\n      } = await userAxios.get('/app/moods', {\n        params: {\n          type: type\n        }\n      });\n      return data;\n    }\n  }; // get recent playlist\n\n\n  const getPosts = async type => {\n    if (type === 'user') {\n      const {\n        data\n      } = await userAxios.get(`/app/lists`, {\n        params: {\n          type: type\n        }\n      });\n      return data;\n    } else if (type === 'friends') {\n      const {\n        data\n      } = await userAxios.get(`/app/lists`, {\n        params: {\n          type: type\n        }\n      });\n      return data;\n    }\n  };\n\n  useEffect(() => {\n    getCurrentUserTop('artists', 5, 'short_term').then(res => setMonthlyArtists(res)).catch(err => console.log(err));\n    getCurrentUserTop('tracks', 5, 'short_term').then(res => setMonthlyTracks(res)).catch(err => console.log(err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      monthlyArtists,\n      monthlyTracks,\n      spotifyUserAPI,\n      search,\n      found,\n      setFound,\n      selectedItem,\n      getSelection,\n      getPlaylists,\n      playlists,\n      setPlaylists,\n      getPlaylistTracks,\n      playlistTracks,\n      getCurrentUserTop\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AppContextProvider, \"WXwXovhFtPYme63WfSeHj/DO+84=\");\n\n_c = AppContextProvider;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"sources":["/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/appContext.js"],"names":["React","useState","useEffect","useContext","axios","accessToken","UserContext","AppContext","createContext","AppContextProvider","props","spotifyUserAPI","create","interceptors","request","use","config","headers","Authorization","baseURL","userAxios","monthlyArtists","setMonthlyArtists","monthlyTracks","setMonthlyTracks","found","setFound","playlists","setPlaylists","items","total","playlistTracks","setPlaylistTracks","selectedItem","setSelectedItem","search","inputs","parseInputs","split","join","get","params","type","then","res","data","catch","err","console","log","getSelection","id","location","getCurrentUserTop","limit","time_range","getPlaylists","collected","filter","item","owner","display_name","getPlaylistTracks","shareItem","list","timeframe","post","time","setUserState","prevState","lists","recentMood","updateFollowStatus","user","getStatus","getPosts","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { accessToken } from '../spotify.js';\nimport { UserContext } from './userProvider.js';\n\nexport const AppContext = React.createContext();\n\nexport default function AppContextProvider(props){\n    const spotifyUserAPI = axios.create();\n    spotifyUserAPI.interceptors.request.use(config => {\n        config.headers.Authorization = `Bearer ${accessToken}`\n        config.baseURL = 'https://api.spotify.com/v1'\n        return config\n    });\n    const {\n        userAxios\n    } = useContext(UserContext);\n\n    const [ monthlyArtists, setMonthlyArtists ] = useState({});\n    const [ monthlyTracks, setMonthlyTracks ] = useState({});\n    const [ found, setFound ] = useState([]);\n\n    const [ playlists, setPlaylists ] = useState({ items:[], total: 0});\n    const [ playlistTracks, setPlaylistTracks ] = useState([]);\n    const [ selectedItem, setSelectedItem ] = useState({});\n\n    const search = (inputs) => {\n        const parseInputs = inputs.split(' ').join('_')\n        userAxios.get(`/app/users`, {\n            params: {\n                inputs: parseInputs,\n                type: 'friend'\n            }\n        })\n        .then(res => setFound(res.data))\n        .catch(err => console.log(err))\n    };\n\n    const getSelection = (id, location) => {\n        setFound()\n        userAxios.get(`/app/users`, {\n            params: {\n                id: id,\n                type: location\n            }\n        })\n        .then(res => setSelectedItem(res.data))\n        .catch(err => console.log(err))\n    };\n\n    const getCurrentUserTop = async (type, limit, time_range) => {\n            const { data } = await spotifyUserAPI.get(`/me/top/${type}`, {\n            params: {\n                limit: limit,\n                time_range: time_range\n            }\n        })\n            return data\n    };\n\n    const getPlaylists = async (id) => {\n        const { data } = await spotifyUserAPI.get(`/users/${id}/playlists`, {\n            params: {\n                limit: 50\n            }\n        })\n        // filter out spotify owned\n        const collected = data.items.filter(item => item.owner.display_name !== 'Spotify');\n        return collected\n    };\n\n    // for finding overall playlist analysis data; id = playlistId **\n    const getPlaylistTracks = async (id) => {\n        const { data } = await spotifyUserAPI.get(`/playlists/${id}/tracks`)\n        setPlaylistTracks(data)\n    };\n\n\n// share posts depending on type\nconst shareItem = async (list, timeframe) => {\n    if(list.type === 'playlist'){\n        userAxios.post(`/app/lists`, list, {\n            params: {\n                time: timeframe\n            }\n        })\n        .then((res) => setUserState(prevState => ({...prevState, lists: [res.data]})))\n        .catch(err => console.log(err))\n    } else {\n        userAxios.post(`/app/moods/${timeframe}`, list)\n        .then((res) => setUserState(prevState => ({...prevState, recentMood: [res.data]})))\n        .catch(err => console.log(err))\n    }\n};\n\n// follow and unfollow\nconst updateFollowStatus = (id, type) => {\n    userAxios.post(`/app/users/friends`, {\n        params: {\n            type: type,\n            id: id\n        }\n    })\n    .then(res => \n        setUserState(prevState => ({\n            ...prevState,\n            user: res.data\n        }))\n        )\n    .catch(err => console.log(err))\n};\n\n\n// get all friends' posts in DB **\nconst getStatus = async (type) => {\n    if(type === 'user'){\n    const { data } = await userAxios.get(`/app/moods`, {\n        params: {\n            type: type\n        }\n    })\n    return data\n    } else if(type === 'friends'){\n    const { data } = await userAxios.get('/app/moods', {\n        params: {\n            type: type\n        }\n    })\n    return data\n}};\n\n// get recent playlist\nconst getPosts = async (type) => {\n    if(type === 'user'){\n    const { data } = await userAxios.get(`/app/lists`, {\n        params: {\n            type: type,\n        }\n    })\n    return data\n} else if(type === 'friends'){\n    const { data } = await userAxios.get(`/app/lists`, {\n        params: {\n            type: type\n        }\n    })\n    return data\n}};\n\n    useEffect(() => {\n        getCurrentUserTop('artists', 5, 'short_term')\n        .then(res => setMonthlyArtists(res))\n        .catch(err => console.log(err))\n        getCurrentUserTop('tracks', 5, 'short_term')\n        .then(res => setMonthlyTracks(res))\n        .catch(err => console.log(err))\n    }, []);\n\n    return(\n        <AppContext.Provider\n        value={{\n            monthlyArtists,\n            monthlyTracks,\n            spotifyUserAPI,\n            search,\n            found,\n            setFound,\n            selectedItem,\n            getSelection,\n            getPlaylists,\n            playlists,\n            setPlaylists,\n            getPlaylistTracks,\n            playlistTracks,\n            getCurrentUserTop,\n        }}>\n            {props.children}\n        </AppContext.Provider>\n    )\n};"]},"metadata":{},"sourceType":"module"}