{"ast":null,"code":"import axios from 'axios';\nconst spotifyUserAPI = axios.create(); // declare localStorage keys\n\nexport const LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n}; // retrieve localStorage values\n\nexport const LOCALSTORAGE_VALUES = {\n  accessToken: localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  expireTime: localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\nexport const spotifyLogout = () => {\n  localStorage.removeItem('spotify_access_token');\n  localStorage.removeItem('spotify_token_expire_time');\n  localStorage.removeItem('spotify_token_timestamp');\n};\n\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error'); // If there's an error OR the token in localStorage has expired, refresh the token\n\n  if (hasError || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    spotifyLogout();\n  } // If there is a token in the URL query params, user is logging in for the first time\n\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    } // Set timestamp to keys\n\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); // Return access token from query params\n\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  }\n\n  return false;\n};\n\nexport const accessToken = getAccessToken(); // set global configs for this instance\n\nspotifyUserAPI.interceptors.request.use(config => {\n  config.headers.Authorization = `Bearer ${accessToken}`;\n  config.baseURL = 'https://api.spotify.com/v1';\n  return config;\n});\nexport const getCurrentUserProfile = () => spotifyUserAPI.get('/me');","map":{"version":3,"sources":["/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/spotify.js"],"names":["axios","spotifyUserAPI","create","LOCALSTORAGE_KEYS","accessToken","expireTime","timestamp","LOCALSTORAGE_VALUES","localStorage","getItem","spotifyLogout","removeItem","getAccessToken","queryString","window","location","search","urlParams","URLSearchParams","queryParams","get","hasError","property","setItem","Date","now","interceptors","request","use","config","headers","Authorization","baseURL","getCurrentUserProfile"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,cAAc,GAAGD,KAAK,CAACE,MAAN,EAAvB,C,CAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAG;AAC7BC,EAAAA,WAAW,EAAE,sBADgB;AAE7BC,EAAAA,UAAU,EAAE,2BAFiB;AAG7BC,EAAAA,SAAS,EAAE;AAHkB,CAA1B,C,CAMP;;AACA,OAAO,MAAMC,mBAAmB,GAAG;AAC/BH,EAAAA,WAAW,EAAEI,YAAY,CAACC,OAAb,CAAqBN,iBAAiB,CAACC,WAAvC,CADkB;AAE/BC,EAAAA,UAAU,EAAEG,YAAY,CAACC,OAAb,CAAqBN,iBAAiB,CAACE,UAAvC,CAFmB;AAG/BC,EAAAA,SAAS,EAAEE,YAAY,CAACC,OAAb,CAAqBN,iBAAiB,CAACG,SAAvC;AAHoB,CAA5B;AAMP,OAAO,MAAMI,aAAa,GAAG,MAAM;AACjCF,EAAAA,YAAY,CAACG,UAAb,CAAwB,sBAAxB;AACAH,EAAAA,YAAY,CAACG,UAAb,CAAwB,2BAAxB;AACAH,EAAAA,YAAY,CAACG,UAAb,CAAwB,yBAAxB;AACD,CAJM;;AAMP,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAApC;AACA,QAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBL,WAApB,CAAlB;AACA,QAAMM,WAAW,GAAG;AAChB,KAAChB,iBAAiB,CAACC,WAAnB,GAAiCa,SAAS,CAACG,GAAV,CAAc,cAAd,CADjB;AAEhB,KAACjB,iBAAiB,CAACE,UAAnB,GAAgCY,SAAS,CAACG,GAAV,CAAc,YAAd;AAFhB,GAApB;AAIA,QAAMC,QAAQ,GAAGJ,SAAS,CAACG,GAAV,CAAc,OAAd,CAAjB,CAPyB,CASzB;;AACA,MAAIC,QAAQ,IAAId,mBAAmB,CAACH,WAApB,KAAoC,WAApD,EAAiE;AAC7DM,IAAAA,aAAa;AAChB,GAZwB,CAczB;;;AACA,MAAIS,WAAW,CAAChB,iBAAiB,CAACC,WAAnB,CAAf,EAAgD;AAC9C;AACE,SAAK,MAAMkB,QAAX,IAAuBH,WAAvB,EAAoC;AACpCL,MAAAA,MAAM,CAACN,YAAP,CAAoBe,OAApB,CAA4BD,QAA5B,EAAsCH,WAAW,CAACG,QAAD,CAAjD;AACC,KAJ2C,CAK9C;;;AACER,IAAAA,MAAM,CAACN,YAAP,CAAoBe,OAApB,CAA4BpB,iBAAiB,CAACG,SAA9C,EAAyDkB,IAAI,CAACC,GAAL,EAAzD,EAN4C,CAO9C;;AACE,WAAON,WAAW,CAAChB,iBAAiB,CAACC,WAAnB,CAAlB;AACH;;AACD,SAAO,KAAP;AACH,CA1BD;;AA4BA,OAAO,MAAMA,WAAW,GAAGQ,cAAc,EAAlC,C,CAEP;;AACAX,cAAc,CAACyB,YAAf,CAA4BC,OAA5B,CAAoCC,GAApC,CAAwCC,MAAM,IAAI;AAC9CA,EAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAAgC,UAAS3B,WAAY,EAArD;AACAyB,EAAAA,MAAM,CAACG,OAAP,GAAiB,4BAAjB;AACA,SAAOH,MAAP;AACH,CAJD;AAMA,OAAO,MAAMI,qBAAqB,GAAG,MAAMhC,cAAc,CAACmB,GAAf,CAAmB,KAAnB,CAApC","sourcesContent":["import axios from 'axios';\nconst spotifyUserAPI = axios.create();\n\n// declare localStorage keys\nexport const LOCALSTORAGE_KEYS = {\n    accessToken: 'spotify_access_token',\n    expireTime: 'spotify_token_expire_time',\n    timestamp: 'spotify_token_timestamp',\n};\n\n// retrieve localStorage values\nexport const LOCALSTORAGE_VALUES = {\n    accessToken: localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n    expireTime: localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n    timestamp: localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n};\n\nexport const spotifyLogout = () => {\n  localStorage.removeItem('spotify_access_token')\n  localStorage.removeItem('spotify_token_expire_time')\n  localStorage.removeItem('spotify_token_timestamp')\n};\n\nconst getAccessToken = () => {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const queryParams = {\n        [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n        [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\n    };\n    const hasError = urlParams.get('error');\n\n    // If there's an error OR the token in localStorage has expired, refresh the token\n    if (hasError || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n        spotifyLogout();\n    }\n\n    // If there is a token in the URL query params, user is logging in for the first time\n    if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n      // Store the query params in localStorage\n        for (const property in queryParams) {\n        window.localStorage.setItem(property, queryParams[property]);\n        }\n      // Set timestamp to keys\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n      // Return access token from query params\n        return queryParams[LOCALSTORAGE_KEYS.accessToken];\n    }\n    return false;\n};\n\nexport const accessToken = getAccessToken();\n\n// set global configs for this instance\nspotifyUserAPI.interceptors.request.use(config => {\n    config.headers.Authorization = `Bearer ${accessToken}`\n    config.baseURL = 'https://api.spotify.com/v1'\n    return config\n});\n\nexport const getCurrentUserProfile = () => spotifyUserAPI.get('/me');"]},"metadata":{},"sourceType":"module"}