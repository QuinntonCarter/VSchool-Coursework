{"ast":null,"code":"var _jsxFileName = \"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/userProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { LOCALSTORAGE_KEYS, accessToken } from '../spotify.js'; // will need to refactor this to work with new cueappDB\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nconst userAxios = axios.create();\nuserAxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\nexport default function UserProvider(props) {\n  _s();\n\n  const initState = {\n    user: JSON.parse(localStorage.getItem('user')) || {},\n    token: localStorage.getItem('token') || '',\n    lists: [],\n    errMsg: ''\n  };\n  const [userState, setUserState] = useState(initState); // for auth\n\n  function signup(credentials) {\n    axios.post('/auth/signup', credentials).then(res => {\n      const {\n        user,\n        token\n      } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      setUserState(prevUserState => ({ ...prevUserState,\n        user,\n        token\n      }));\n    }).catch(err => handleAuthError(err.response.data.errMsg));\n  }\n\n  ;\n\n  function login(credentials) {\n    axios.post('/auth/login', credentials).then(res => {\n      const {\n        user,\n        token\n      } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      setUserState(prevUserState => ({ ...prevUserState,\n        user,\n        token,\n        lists: []\n      }));\n    }).catch(err => handleAuthError(err.response.data.errMsg));\n  }\n\n  ;\n\n  function logout() {\n    for (const property in LOCALSTORAGE_KEYS) {\n      localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n    }\n\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUserState({\n      user: {},\n      token: ''\n    });\n  }\n\n  ; //err\n\n  function handleAuthError(errMsg) {\n    setUserState(prevState => ({ ...prevState,\n      errMsg\n    }));\n  }\n\n  ;\n\n  function resetAuthError() {\n    setUserState(prevState => ({ ...prevState,\n      errMsg: ''\n    }));\n  }\n\n  ; // CRUD\n  // get all posts in DB\n  // function getAllPosts(){\n  // userAxios.get('/api/posts')\n  // .then(res =>{\n  //         setUserState(prevState => ({\n  //             ...prevState,\n  //             allPosts: res.data\n  //         }))\n  //     }\n  // )\n  // .catch(err => console.log(err.response.data.errMsg))\n  // };\n  // get logged in user's posts * fix/work on backend\n  // function getUserPosts(userId){\n  // userAxios.get(`/api/posts/user/${userId}`)\n  // .then(res => {\n  //     setUserState(prevState => ({\n  //         ...prevState,\n  //         posts: res.data\n  //     }))\n  // })\n  // .catch(err => console.log(err.response.data.errMsg))\n  // };\n  // new post POST\n  // function addPost(newPost){\n  // userAxios.post('/api/posts', newPost)\n  // .then(res => {\n  //     setUserState(prevState => ({\n  //         ...prevState,\n  //         allPosts: [...prevState.allPosts, res.data]\n  //     }))\n  // })\n  // .catch(err => console.log(err.response.data.errMsg))\n  // };\n  // DELETE post\n  // function deletePost(postId){\n  //     userAxios.delete(`/api/posts/${postId}`)\n  //     .then(res => console.log(res.data))\n  //     .catch(err => console.log(err))\n  //     .finally(getAllPosts())\n  // }\n  // voting functionality\n  // function submitVote(vote, userId, postId){\n  //     userId === userState.user._id ?\n  //     console.log('Error: this is your own post or comment')\n  //     :\n  //     userAxios.put(`/api/posts/${vote}/${postId}`)\n  //     .then(res => console.log(res.data))\n  //     .catch(err => console.log(err.response.data.errMsg))\n  //     .finally(getAllPosts())\n  // }\n  // comments CRUD\n  // GET all comments by user\n  // function getUserComm(userId){\n  //     userAxios.get(`/api/comment/user/${userId}`)\n  //     .then(res => {\n  //         setUserState(prevState => ({\n  //             ...prevState,\n  //             comments: res.data\n  //         }))\n  //     })\n  //     .catch(err => console.log(err.response.data.errMsg))\n  // };\n  // POST comment\n  // function postComment(postId, newComment){\n  //     userAxios.put(`/api/comment/${postId}`, newComment)\n  //     .then(res => console.log(res.data))\n  //     .catch(err => console.log(err.response.data.errMsg))\n  //     .finally(getAllPosts())\n  // }\n  // DELETE comment ** check **\n  // function deleteComment(postId, comId){\n  // userAxios.put(`/api/${postId}/${comId}`)\n  // .then(res => {\n  //     setUserState(prevState => ({\n  //         ...prevState,\n  //         allPosts: [...prevState.allPosts, res.data]\n  //     }))\n  // })\n  // .catch(err => console.log(err.response.data.errMsg))\n  // .finally(getAllPosts())\n  // }\n  // *\n  // for spotify\n\n  const [spotifyProfile, setSpotifyProfile] = useState(null);\n  useEffect(() => {\n    if (!accessToken) {\n      logout();\n    }\n  }); // *\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: { ...userState,\n      signup,\n      login,\n      logout,\n      // addPost,\n      // deletePost,\n      // getUserPosts,\n      // getAllPosts,\n      // submitVote,\n      // postComment,\n      // deleteComment,\n      resetAuthError,\n      spotifyProfile\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserProvider, \"162WPJ/H6gMmq66M1pYd0WoRfdc=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/userProvider.js"],"names":["React","useState","useEffect","axios","LOCALSTORAGE_KEYS","accessToken","UserContext","createContext","userAxios","create","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","UserProvider","props","initState","user","JSON","parse","lists","errMsg","userState","setUserState","signup","credentials","post","then","res","data","setItem","stringify","prevUserState","catch","err","handleAuthError","response","login","logout","property","removeItem","prevState","resetAuthError","spotifyProfile","setSpotifyProfile","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,WAA5B,QAA+C,eAA/C,C,CAGA;;;AAEA,OAAO,MAAMC,WAAW,gBAAGN,KAAK,CAACO,aAAN,EAApB;AAEP,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAN,EAAlB;AACAD,SAAS,CAACE,YAAV,CAAuBC,OAAvB,CAA+BC,GAA/B,CAAmCC,MAAM,IAAI;AACzC,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,GAAgC,UAASJ,KAAM,EAA/C;AACA,SAAOD,MAAP;AACH,CAJD;AAMA,eAAe,SAASM,YAAT,CAAsBC,KAAtB,EAA4B;AAAA;;AACvC,QAAMC,SAAS,GAAG;AACdC,IAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWT,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C,EADpC;AAEdF,IAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,EAF1B;AAGdS,IAAAA,KAAK,EAAE,EAHO;AAIdC,IAAAA,MAAM,EAAE;AAJM,GAAlB;AAOA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAACoB,SAAD,CAA1C,CARuC,CAU3C;;AACI,WAASQ,MAAT,CAAgBC,WAAhB,EAA4B;AACxB3B,IAAAA,KAAK,CAAC4B,IAAN,CAAW,cAAX,EAA2BD,WAA3B,EACCE,IADD,CACMC,GAAG,IAAI;AACT,YAAM;AAAEX,QAAAA,IAAF;AAAQR,QAAAA;AAAR,UAAkBmB,GAAG,CAACC,IAA5B;AACAnB,MAAAA,YAAY,CAACoB,OAAb,CAAqB,OAArB,EAA8BrB,KAA9B;AACAC,MAAAA,YAAY,CAACoB,OAAb,CAAqB,MAArB,EAA6BZ,IAAI,CAACa,SAAL,CAAed,IAAf,CAA7B;AACAM,MAAAA,YAAY,CAACS,aAAa,KAAK,EAC3B,GAAGA,aADwB;AAE3Bf,QAAAA,IAF2B;AAG3BR,QAAAA;AAH2B,OAAL,CAAd,CAAZ;AAKH,KAVD,EAWCwB,KAXD,CAWOC,GAAG,IAAIC,eAAe,CAACD,GAAG,CAACE,QAAJ,CAAaP,IAAb,CAAkBR,MAAnB,CAX7B;AAYH;;AAAA;;AAED,WAASgB,KAAT,CAAeZ,WAAf,EAA2B;AACvB3B,IAAAA,KAAK,CAAC4B,IAAN,CAAW,aAAX,EAA0BD,WAA1B,EACCE,IADD,CACMC,GAAG,IAAI;AACT,YAAM;AAAEX,QAAAA,IAAF;AAAQR,QAAAA;AAAR,UAAkBmB,GAAG,CAACC,IAA5B;AACAnB,MAAAA,YAAY,CAACoB,OAAb,CAAqB,OAArB,EAA8BrB,KAA9B;AACAC,MAAAA,YAAY,CAACoB,OAAb,CAAqB,MAArB,EAA6BZ,IAAI,CAACa,SAAL,CAAed,IAAf,CAA7B;AACAM,MAAAA,YAAY,CAACS,aAAa,KAAK,EAC3B,GAAGA,aADwB;AAE3Bf,QAAAA,IAF2B;AAG3BR,QAAAA,KAH2B;AAI3BW,QAAAA,KAAK,EAAE;AAJoB,OAAL,CAAd,CAAZ;AAMH,KAXD,EAYCa,KAZD,CAYOC,GAAG,IAAIC,eAAe,CAACD,GAAG,CAACE,QAAJ,CAAaP,IAAb,CAAkBR,MAAnB,CAZ7B;AAaH;;AAAA;;AAED,WAASiB,MAAT,GAAiB;AACb,SAAK,MAAMC,QAAX,IAAuBxC,iBAAvB,EAA0C;AACtCW,MAAAA,YAAY,CAAC8B,UAAb,CAAwBzC,iBAAiB,CAACwC,QAAD,CAAzC;AACH;;AACD7B,IAAAA,YAAY,CAAC8B,UAAb,CAAwB,OAAxB;AACA9B,IAAAA,YAAY,CAAC8B,UAAb,CAAwB,MAAxB;AACAjB,IAAAA,YAAY,CAAC;AACTN,MAAAA,IAAI,EAAE,EADG;AAETR,MAAAA,KAAK,EAAE;AAFE,KAAD,CAAZ;AAIH;;AAAA,GApDsC,CAsD3C;;AACI,WAAS0B,eAAT,CAAyBd,MAAzB,EAAgC;AAC5BE,IAAAA,YAAY,CAACkB,SAAS,KAAK,EACvB,GAAGA,SADoB;AAEvBpB,MAAAA;AAFuB,KAAL,CAAV,CAAZ;AAIH;;AAAA;;AAED,WAASqB,cAAT,GAAyB;AACrBnB,IAAAA,YAAY,CAACkB,SAAS,KAAK,EACvB,GAAGA,SADoB;AAEvBpB,MAAAA,MAAM,EAAE;AAFe,KAAL,CAAV,CAAZ;AAIH;;AAAA,GAnEsC,CAqEvC;AACJ;AACI;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEJ;AACI;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEJ;AACI;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEJ;AACI;AACA;AACA;AACA;AACA;AACA;AAEJ;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACI;AACA;AACA;AACA;AACA;AACA;AAEJ;AACI;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEA;AACA;;AACA,QAAM,CAACsB,cAAD,EAAiBC,iBAAjB,IAAsChD,QAAQ,CAAC,IAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACG,WAAJ,EAAgB;AACZsC,MAAAA,MAAM;AACT;AACJ,GAJQ,CAAT,CApKuC,CA0KvC;;AAEA,sBACI,QAAC,WAAD,CAAa,QAAb;AACA,IAAA,KAAK,EAAE,EACH,GAAGhB,SADA;AAEHE,MAAAA,MAFG;AAGHa,MAAAA,KAHG;AAIHC,MAAAA,MAJG;AAKH;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,MAAAA,cAZG;AAaHC,MAAAA;AAbG,KADP;AAAA,cAiBK5B,KAAK,CAAC8B;AAjBX;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;;GAjMuB/B,Y;;KAAAA,Y","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { LOCALSTORAGE_KEYS, accessToken } from '../spotify.js';\n\n\n// will need to refactor this to work with new cueappDB\n\nexport const UserContext = React.createContext();\n\nconst userAxios = axios.create()\nuserAxios.interceptors.request.use(config => {\n    const token = localStorage.getItem('token')\n    config.headers.Authorization = `Bearer ${token}`\n    return config\n});\n\nexport default function UserProvider(props){\n    const initState = {\n        user: JSON.parse(localStorage.getItem('user')) || {},\n        token: localStorage.getItem('token') || '',\n        lists: [],\n        errMsg: ''\n    };\n\n    const [userState, setUserState] = useState(initState)\n\n// for auth\n    function signup(credentials){\n        axios.post('/auth/signup', credentials)\n        .then(res => {\n            const { user, token } = res.data\n            localStorage.setItem('token', token)\n            localStorage.setItem('user', JSON.stringify(user))\n            setUserState(prevUserState => ({\n                ...prevUserState,\n                user,\n                token\n            }))\n        })\n        .catch(err => handleAuthError(err.response.data.errMsg))\n    };\n\n    function login(credentials){\n        axios.post('/auth/login', credentials)\n        .then(res => {\n            const { user, token } = res.data\n            localStorage.setItem('token', token)\n            localStorage.setItem('user', JSON.stringify(user))\n            setUserState(prevUserState => ({\n                ...prevUserState,\n                user,\n                token,\n                lists: []\n            }))\n        })\n        .catch(err => handleAuthError(err.response.data.errMsg))\n    };\n\n    function logout(){\n        for (const property in LOCALSTORAGE_KEYS) {\n            localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n        }\n        localStorage.removeItem('token')\n        localStorage.removeItem('user')\n        setUserState({\n            user: {},\n            token: '',\n        })\n    };\n\n//err\n    function handleAuthError(errMsg){\n        setUserState(prevState => ({\n            ...prevState,\n            errMsg\n        }))\n    };\n\n    function resetAuthError(){\n        setUserState(prevState => ({\n            ...prevState,\n            errMsg: ''\n        }))\n    };\n\n    // CRUD\n// get all posts in DB\n    // function getAllPosts(){\n        // userAxios.get('/api/posts')\n        // .then(res =>{\n        //         setUserState(prevState => ({\n        //             ...prevState,\n        //             allPosts: res.data\n        //         }))\n        //     }\n        // )\n        // .catch(err => console.log(err.response.data.errMsg))\n    // };\n\n// get logged in user's posts * fix/work on backend\n    // function getUserPosts(userId){\n        // userAxios.get(`/api/posts/user/${userId}`)\n        // .then(res => {\n        //     setUserState(prevState => ({\n        //         ...prevState,\n        //         posts: res.data\n        //     }))\n        // })\n        // .catch(err => console.log(err.response.data.errMsg))\n    // };\n\n// new post POST\n    // function addPost(newPost){\n        // userAxios.post('/api/posts', newPost)\n        // .then(res => {\n        //     setUserState(prevState => ({\n        //         ...prevState,\n        //         allPosts: [...prevState.allPosts, res.data]\n        //     }))\n        // })\n        // .catch(err => console.log(err.response.data.errMsg))\n    // };\n\n// DELETE post\n    // function deletePost(postId){\n    //     userAxios.delete(`/api/posts/${postId}`)\n    //     .then(res => console.log(res.data))\n    //     .catch(err => console.log(err))\n    //     .finally(getAllPosts())\n    // }\n\n// voting functionality\n    // function submitVote(vote, userId, postId){\n    //     userId === userState.user._id ?\n    //     console.log('Error: this is your own post or comment')\n    //     :\n    //     userAxios.put(`/api/posts/${vote}/${postId}`)\n    //     .then(res => console.log(res.data))\n    //     .catch(err => console.log(err.response.data.errMsg))\n    //     .finally(getAllPosts())\n    // }\n\n// comments CRUD\n// GET all comments by user\n    // function getUserComm(userId){\n    //     userAxios.get(`/api/comment/user/${userId}`)\n    //     .then(res => {\n    //         setUserState(prevState => ({\n    //             ...prevState,\n    //             comments: res.data\n    //         }))\n    //     })\n    //     .catch(err => console.log(err.response.data.errMsg))\n    // };\n\n// POST comment\n    // function postComment(postId, newComment){\n    //     userAxios.put(`/api/comment/${postId}`, newComment)\n    //     .then(res => console.log(res.data))\n    //     .catch(err => console.log(err.response.data.errMsg))\n    //     .finally(getAllPosts())\n    // }\n\n// DELETE comment ** check **\n    // function deleteComment(postId, comId){\n        // userAxios.put(`/api/${postId}/${comId}`)\n        // .then(res => {\n        //     setUserState(prevState => ({\n        //         ...prevState,\n        //         allPosts: [...prevState.allPosts, res.data]\n        //     }))\n        // })\n        // .catch(err => console.log(err.response.data.errMsg))\n        // .finally(getAllPosts())\n    // }\n\n    // *\n    // for spotify\n    const [spotifyProfile, setSpotifyProfile] = useState(null);\n\n    useEffect(() => {\n        if(!accessToken){\n            logout();\n        }\n    },)\n\n    // *\n    \n    return(\n        <UserContext.Provider\n        value={{\n            ...userState,\n            signup,\n            login,\n            logout,\n            // addPost,\n            // deletePost,\n            // getUserPosts,\n            // getAllPosts,\n            // submitVote,\n            // postComment,\n            // deleteComment,\n            resetAuthError,\n            spotifyProfile,\n            \n        }}>\n            {props.children}\n        </UserContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}