{"ast":null,"code":"var _jsxFileName = \"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/checkMood.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AppContext } from './context/appContext';\nimport { UserContext } from './context/userProvider';\nimport { MoodItem } from './moodItem.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CheckMood = () => {\n  _s();\n\n  const {\n    shareItem,\n    getCurrentUserTop,\n    getPlaylists,\n    setPlaylists,\n    playlists,\n    found,\n    setFound\n  } = useContext(AppContext);\n  const {\n    spotifyUser: {\n      id\n    }\n  } = useContext(UserContext);\n  const history = useHistory();\n  const [view, setView] = useState(false);\n  const [type, setType] = useState('artists');\n  const [amount, setAmount] = useState(3);\n  const [timeframe, setTimeframe] = useState('short_term');\n  const [mood, setMood] = useState([]);\n  useEffect(() => {\n    getCurrentUserTop(type, amount, timeframe).then(res => {\n      const {\n        items\n      } = res;\n      setMood(items);\n      console.log(items); // pulls only needed metadata from JSON object\n\n      const forDB = items.map(item => {\n        let selectionParsed;\n\n        if (item.type === 'artist') {\n          return {\n            selectionName: item.name,\n            genres: item.genitem.genres.map(genre => genre),\n            image: item.images[0] ? item.images[0].url : null,\n            href: item.external_urls.spotify,\n            type: item.type\n          };\n        } else if (item.type === 'track') {\n          return {\n            selectionName: item.album.name,\n            artists: item.artists.map(artist => artist.name),\n            image: item.images[0] ? item.images[0].url : null,\n            href: item.external_urls.spotify,\n            type: item.type\n          };\n        } else if (item.type === 'playlist') {\n          return {\n            name: item.name,\n            description: item.description,\n            owner: item.owner.display_name,\n            ownerProfile: item.owner.external_urls.spotify,\n            image: item.images[0] ? item.images[0].url : null,\n            type: item.type,\n            href: item.external_urls.spotify\n          };\n        }\n\n        return selectionParsed;\n      }); // setFound to the items w only needed data\n\n      setFound(forDB);\n    }).catch(err => console.log(err));\n    getPlaylists(id).then(res => {\n      setPlaylists({\n        items: res,\n        total: res.length\n      });\n    }).catch(err => console.log(err));\n  }, [type, amount, timeframe]); // else if(item.type === 'playlist'){\n  //         setFound({\n  //             name: item.name,\n  //             description: item.description,\n  //             owner: item.owner.display_name,\n  //             ownerProfile: item.owner.external_urls.spotify,\n  //             image: item.images[0].url,\n  //             type: item.type,\n  //             href: item.external_urls.spotify\n  //         })\n  //     }\n  // },[])\n\n  const mappedMood = mood && mood.map(item => /*#__PURE__*/_jsxDEV(MoodItem, {\n    color: 'indigo',\n    item: item,\n    setFound: setFound\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 49\n  }, this));\n  const mappedPlaylists = playlists && playlists.items.map(item => /*#__PURE__*/_jsxDEV(MoodItem, {\n    color: 'indigo',\n    item: item\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 70\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid container-main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-3 pt-4 bg-indigo-800 text-cyan-800 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onClick: () => history.goBack(),\n        className: \"bg-cerise-700 text-xs text-cyan-50 font-bold btnbold-small\",\n        type: \"button\",\n        value: \"to profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onClick: () => setView(prevState => !prevState),\n        value: `view ${view ? `recent` : `playlists`}`,\n        title: \"click to check moods of spotify playlists\",\n        className: \"btn text-sm\",\n        type: \"button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), !view ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"p-3 text-md text-cocoa-900 grid grid-cols-1 gap-3 pr-6 pl-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"bg-indigo-200 text-center text-indigo-800 text-sm rounded-full\",\n            onChange: e => setAmount(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"3\",\n              children: \" top 3 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"5\",\n              children: \" top 5 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"8\",\n              children: \" top 8 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"10\",\n              children: \" top 10 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"15\",\n              children: \" top 15 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"20\",\n              children: \" top 20 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"25\",\n              children: \" top 25 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"30\",\n              children: \" top 30 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"40\",\n              children: \" top 40 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"50\",\n              children: \" top 50 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"bg-indigo-200 text-center text-sm text-indigo-800 rounded-full\",\n            onChange: e => setTimeframe(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"short_term\",\n              children: \" monthly \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"medium_term\",\n              children: \" biannual \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"long_term\",\n              children: \" annual \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"bg-indigo-200 text-center text-indigo-800 text-sm rounded-full\",\n            onChange: e => setType(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"artists\",\n              children: \" artists \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"tracks\",\n              children: \" tracks \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onClick: () => shareItem(found),\n            className: \"bg-indigo-600 text-indigo-50 font-medium text-md btn\",\n            type: \"button\",\n            title: \"post as your mood\",\n            value: \"post mood.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-cerise-50\",\n          children: [\" top \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xl\",\n            children: amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 60\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xl\",\n            children: [\" \", type, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 102\n          }, this), timeframe === 'short_term' && ` these past 30 days`, timeframe === 'medium_term' && ' these past 6 months', timeframe === 'long_term' && ' the past year']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \" p-3 rounded\",\n          children: mappedMood || 'the vibe is off. refresh the page.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // playlist view\n      _jsxDEV(\"div\", {\n        className: \"p-3 text-md text-cocoa-50 grid grid-cols-1 gap-3 pr-6 pl-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm\",\n          children: [\" viewing \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xl\",\n            children: [\" \", playlists.total, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 49\n          }, this), \" playlists \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }, this), mappedPlaylists]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CheckMood, \"nbfYqXTH8Ew+SurgJqNySl3Mibw=\", false, function () {\n  return [useHistory];\n});\n\n_c = CheckMood;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckMood\");","map":{"version":3,"sources":["/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/checkMood.js"],"names":["React","useState","useEffect","useContext","useHistory","AppContext","UserContext","MoodItem","CheckMood","shareItem","getCurrentUserTop","getPlaylists","setPlaylists","playlists","found","setFound","spotifyUser","id","history","view","setView","type","setType","amount","setAmount","timeframe","setTimeframe","mood","setMood","then","res","items","console","log","forDB","map","item","selectionParsed","selectionName","name","genres","genitem","genre","image","images","url","href","external_urls","spotify","album","artists","artist","description","owner","display_name","ownerProfile","catch","err","total","length","mappedMood","mappedPlaylists","goBack","prevState","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AppContext } from './context/appContext';\nimport { UserContext } from './context/userProvider';\nimport { MoodItem } from './moodItem.js';\n\nexport const CheckMood = () => {\n    const {\n        shareItem,\n        getCurrentUserTop,\n        getPlaylists,\n        setPlaylists,\n        playlists,\n        found,\n        setFound\n    } = useContext(AppContext);\n    const {\n        spotifyUser : {\n            id\n        }\n    } = useContext(UserContext);\n    \n    const history = useHistory();\n\n    const [ view, setView] = useState(false);\n    const [ type, setType ] = useState('artists');\n    const [ amount, setAmount ] = useState(3);\n    const [ timeframe, setTimeframe ] = useState('short_term');\n    const [ mood, setMood ] = useState([]);\n\n\n    useEffect(() => {\n        getCurrentUserTop(type, amount, timeframe)\n        .then(res => {\n            const { items } = res\n            setMood(items)\n            console.log(items)\n            // pulls only needed metadata from JSON object\n            const forDB = items.map(item => {\n                let selectionParsed\n                if(item.type === 'artist'){\n                return {\n                    selectionName: item.name,\n                    genres: item.genitem.genres.map(genre => genre),\n                    image: item.images[0] ? item.images[0].url : null,\n                    href: item.external_urls.spotify,\n                    type: item.type\n                }\n            } else if(item.type === 'track'){\n                return {\n                    selectionName: item.album.name,\n                    artists: item.artists.map(artist => artist.name),\n                    image: item.images[0] ? item.images[0].url : null,\n                    href: item.external_urls.spotify,\n                    type: item.type\n                }\n            } else if(item.type === 'playlist'){\n                return {\n                    name: item.name,\n                    description: item.description,\n                    owner: item.owner.display_name,\n                    ownerProfile: item.owner.external_urls.spotify,\n                    image: item.images[0] ? item.images[0].url : null,\n                    type: item.type,\n                    href: item.external_urls.spotify\n                }\n            }\n            return selectionParsed\n        })\n        // setFound to the items w only needed data\n            setFound(forDB)\n        })\n        .catch(err => console.log(err))\n        getPlaylists(id)\n        .then(res => {\n            setPlaylists({\n                items: res,\n                total: res.length\n            })\n        })\n        .catch(err => console.log(err))\n    }, [type, amount, timeframe]);\n    // else if(item.type === 'playlist'){\n    //         setFound({\n    //             name: item.name,\n    //             description: item.description,\n    //             owner: item.owner.display_name,\n    //             ownerProfile: item.owner.external_urls.spotify,\n    //             image: item.images[0].url,\n    //             type: item.type,\n    //             href: item.external_urls.spotify\n    //         })\n    //     }\n    // },[])\n\n    const mappedMood = mood && mood.map(item => <MoodItem color={'indigo'} item={item} key={item.id} setFound={setFound}/>);\n    const mappedPlaylists = playlists && playlists.items.map(item => <MoodItem color={'indigo'} item={item} key={item.id}/>);\n\n    return(\n        <div className='grid container-main'>\n        <div className='p-3 pt-4 bg-indigo-800 text-cyan-800 rounded'>\n            <input onClick={() => history.goBack()} className='bg-cerise-700 text-xs text-cyan-50 font-bold btnbold-small' type='button' value='to profile'/>\n            <input onClick={() => setView(prevState => !prevState)} value={`view ${view ? `recent` : `playlists`}`} title='click to check moods of spotify playlists' className='btn text-sm' type='button'/>\n            { !view ?\n            <>\n                <form className='p-3 text-md text-cocoa-900 grid grid-cols-1 gap-3 pr-6 pl-6'>\n                    <select className='bg-indigo-200 text-center text-indigo-800 text-sm rounded-full' onChange={e => setAmount(e.target.value)}>\n                        <option value='3' > top 3 </option>\n                        <option value='5'> top 5 </option>\n                        <option value='8'> top 8 </option>\n                        <option value='10'> top 10 </option>\n                        <option value='15'> top 15 </option>\n                        <option value='20'> top 20 </option>\n                        <option value='25'> top 25 </option>\n                        <option value='30'> top 30 </option>\n                        <option value='40'> top 40 </option>\n                        <option value='50'> top 50 </option>\n                    </select>\n                    <select className='bg-indigo-200 text-center text-sm text-indigo-800 rounded-full' onChange={e => setTimeframe(e.target.value)}>\n                        <option value='short_term' > monthly </option>\n                        <option value='medium_term' > biannual </option>\n                        <option value='long_term'> annual </option>\n                    </select>\n                    <select className='bg-indigo-200 text-center text-indigo-800 text-sm rounded-full' onChange={e => setType(e.target.value)}>\n                        <option value='artists' > artists </option>\n                        <option value='tracks'> tracks </option>\n                    </select>\n                    <input onClick={() => shareItem(found)} className='bg-indigo-600 text-indigo-50 font-medium text-md btn' type='button' title='post as your mood' value='post mood.'/>\n                </form>\n                <p className='text-sm text-cerise-50'> top <span className='text-xl'>{amount}</span> <span className='text-xl'> {type} </span> \n                    {timeframe === 'short_term' && ` these past 30 days`} \n                    {timeframe === 'medium_term' && ' these past 6 months'}\n                    {timeframe === 'long_term' && ' the past year'} \n                </p>\n                <div className=' p-3 rounded'>\n                    {mappedMood || 'the vibe is off. refresh the page.'}\n                </div>\n            </>\n            :\n            // playlist view\n            <div className='p-3 text-md text-cocoa-50 grid grid-cols-1 gap-3 pr-6 pl-6'>\n                <p className='text-sm'> viewing <span className='text-xl'> {playlists.total} </span> playlists </p>\n                {mappedPlaylists}\n            </div>\n            }\n        </div>\n        </div>\n    )\n};"]},"metadata":{},"sourceType":"module"}