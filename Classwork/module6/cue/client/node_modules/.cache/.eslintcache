[{"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/index.js":"1","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/App.js":"2","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/navbar.js":"3","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/protectedRoute.js":"4","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/banner.js":"5","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/resultComp.js":"6","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/forms/searchBar.js":"7","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/appContext.js":"8","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/userProvider.js":"9","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/Auth.js":"10","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/spotify.js":"11","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/forms/authForm.js":"12","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/views/profile.js":"13","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/views/search.js":"14","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/views/lists.js":"15","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/recentTracks.js":"16","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/recentArtists.js":"17","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/checkMood.js":"18","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/moodItem.js":"19","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/resultDetails.js":"20","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/userProfile.js":"21","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/resultsProfile.js":"22"},{"size":498,"mtime":1636580250629,"results":"23","hashOfConfig":"24"},{"size":2353,"mtime":1639629592096,"results":"25","hashOfConfig":"24"},{"size":1043,"mtime":1639523087157,"results":"26","hashOfConfig":"24"},{"size":285,"mtime":1635816739969,"results":"27","hashOfConfig":"24"},{"size":1713,"mtime":1639426386514,"results":"28","hashOfConfig":"24"},{"size":640,"mtime":1639376717324,"results":"29","hashOfConfig":"24"},{"size":1955,"mtime":1639361041904,"results":"30","hashOfConfig":"24"},{"size":5413,"mtime":1639666971532,"results":"31","hashOfConfig":"24"},{"size":7843,"mtime":1639674713493,"results":"32","hashOfConfig":"24"},{"size":3687,"mtime":1639353868508,"results":"33","hashOfConfig":"24"},{"size":4742,"mtime":1638995421851,"results":"34","hashOfConfig":"24"},{"size":770,"mtime":1639426278628,"results":"35","hashOfConfig":"24"},{"size":2076,"mtime":1639610079633,"results":"36","hashOfConfig":"24"},{"size":306,"mtime":1639376611457,"results":"37","hashOfConfig":"24"},{"size":637,"mtime":1639671481338,"results":"38","hashOfConfig":"24"},{"size":455,"mtime":1639074748468,"results":"39","hashOfConfig":"24"},{"size":502,"mtime":1639556383692,"results":"40","hashOfConfig":"24"},{"size":6062,"mtime":1639665348511,"results":"41","hashOfConfig":"24"},{"size":2984,"mtime":1639632061201,"results":"42","hashOfConfig":"24"},{"size":716,"mtime":1639344939767,"results":"43","hashOfConfig":"24"},{"size":771,"mtime":1639343403795,"results":"44","hashOfConfig":"24"},{"size":1838,"mtime":1639665431108,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"495h6e",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/index.js",[],["98","99"],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/App.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/navbar.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/protectedRoute.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/banner.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/resultComp.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/forms/searchBar.js",["100","101","102","103","104"],"import React, { useState, useContext, useEffect } from 'react';\nimport { AppContext } from '../context/appContext.js';\n\nexport const SearchBar = () => {\n    const { \n        search,\n        setFound\n    } = useContext(AppContext);\n    \n    const [ type, setType ] = useState('friend');\n    const [ toggleMore, setToggleMore ] = useState(false);\n    const [ moodLevel, setMoodLevel ] = useState(0);\n\n    const [ inputs, setInputs ] = useState('');\n\n    function handleSubmit(e){\n        e.preventDefault()\n        search(inputs, type)\n        setInputs('')\n    }\n\n    useEffect(() => {\n        setInputs('') \n        setFound([])\n    }, [type])\n\n    return(\n        <form className='grid' onSubmit={handleSubmit}>\n            <span className='text-left grid grid-cols-4'>\n                <select className='col-span-2 text-navy-900 rounded select-primary' onChange={e => setType(e.target.value)}>\n                    <option> friend </option>\n                    <option> mood </option>\n                </select> \n                {type === 'mood' ? \n                <>\n                    <select className='col-span-2 text-indigo-600 bg-indigo-300 rounded select-primary' onChange={e => setType(e.target.value)}>\n                        <option> - select - </option>\n                        <option> placeholder </option>\n                        <option> placeholder </option>\n                        <option> placeholder </option>\n                        <option> placeholder </option>\n                    </select> \n                </>\n                :\n                    <input className='col-span-4 text-indigo-900 p-1 w-full rounded' type='text' value={inputs} onChange={e => setInputs(e.target.value)} placeholder={`${type === 'friend' ? `What's their username` : `What's the ${type}`}?`} required/>\n                }\n            </span>\n            <button className='bg-cyan-200 text-cyan-800 btn'> find {type} </button> \n        </form>\n    )\n}","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/appContext.js",["105"],"import React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { accessToken } from '../spotify.js';\nimport { UserContext } from './userProvider.js';\n\nexport const AppContext = React.createContext();\n\nexport default function AppContextProvider(props){\n    const spotifyUserAPI = axios.create();\n    spotifyUserAPI.interceptors.request.use(config => {\n        config.headers.Authorization = `Bearer ${accessToken}`\n        config.baseURL = 'https://api.spotify.com/v1'\n        return config\n    });\n    const {\n        userAxios\n    } = useContext(UserContext);\n\n    const [ monthlyArtists, setMonthlyArtists ] = useState({});\n    const [ monthlyTracks, setMonthlyTracks ] = useState({});\n    const [ found, setFound ] = useState([]);\n\n    const [ playlists, setPlaylists ] = useState({ items:[], total: 0});\n    const [ playlistTracks, setPlaylistTracks ] = useState([]);\n    const [ selectedItem, setSelectedItem ] = useState({});\n    // *** later maybe\n    // const [ trackFeatures, setTrackFeatures ] = ([{\n    //     danceability: '',\n    //     energy: '',\n    //     tempo: ''\n    // }])\n\n    const search = (inputs, type) => {\n        const parseInputs = inputs.split(' ').join('_')\n        userAxios.get(`/app/users`, {\n            params: {\n                inputs: parseInputs,\n                type: type\n            }\n        })\n        .then(res => setFound(res.data))\n        .catch(err => console.log(err))\n    };\n\n    const getSelection = (id, location) => {\n        setFound()\n        userAxios.get(`/app/users`, {\n            params: {\n                id: id,\n                type: location\n            }\n        })\n        .then(res => setSelectedItem(res.data))\n        .catch(err => console.log(err))\n    };\n\n    const getCurrentUserTop = async (type, limit, time_range) => {\n            const { data } = await spotifyUserAPI.get(`/me/top/${type}`,{\n            params: {\n                limit: limit,\n                time_range: time_range\n            }\n        })\n            return data\n        };\n\n    const getPlaylists = async (id) => {\n        const { data } = await spotifyUserAPI.get(`/users/${id}/playlists`,{\n            params: {\n                limit: 50\n            }\n        })\n        // filter out spotify owned\n        const collected = data.items.filter(item => item.owner.display_name !== 'Spotify');\n        return collected\n    };\n\n    // for finding overall playlist analysis data; id = playlistId **\n    const getPlaylistTracks = async (id) => {\n        const { data } = await spotifyUserAPI.get(`/playlists/${id}/tracks`)\n        setPlaylistTracks(data)\n    };\n\n\n\n    // ** for later **\n    // const getTracksFeatures = async () => {\n    //     const trackIdsString = playlistTracks.items.map(item => {\n    //         return item.track.id\n    //     }).toString()\n    //     const { data } = await spotifyUserAPI.get(`/audio-features`, {\n    //         params: {\n    //             ids: trackIdsString\n    //         }\n    //     })\n    //     return data\n    //     // const parseNA = data.audio_features.filter(item => item !== null)\n    //     // test(parseNA)\n    // };\n    \n    //*** later  */ make this into full out analysis; gets features and track analysis ***\n    // median tempo, key, loudness.\n    // const test = (items) => {\n    //     let danceAbility = []\n    //     // valence, loudness, tempo, energy, danceability\n    //     const verHighDance = items.filter(item => item.danceability >= .75).map(item => item.danceability)\n    //     const highDance = items.filter(item => item.danceability >= .65 && item.danceability <= .75).map(item => item.danceability)\n    //     const mediumDance = items.filter(item => item.danceability <= .6 && item.danceability >= .4).map(item => item.danceability)\n    //     const lowDance = items.filter(item => item.danceability <= .4 && item.danceability >= .2).map(item => item.danceability)\n    //     const verLowDance = items.filter(item => item.danceability <= .2).map(item => item.danceability)\n    //     danceAbility.push({'extreme': verHighDance.length, 'veryhigh': highDance.length, 'medium':mediumDance.length, 'low':lowDance.length, 'extremelow': verLowDance.length})\n    //     Object.values(danceAbility).forEach(val => console.log(val))\n    //     // const len = arrSort.length\n    //     // const mid = (len / 2)\n    //     // const median = len % 2 === 0 ? (arrSort[mid] + arrSort[mid - 1]) / 2 : arrSort[mid - 1];\n    //     // console.log(mid)\n\n    // }\n    useEffect(() => {\n        getCurrentUserTop('artists', 5, 'short_term')\n        .then(res => setMonthlyArtists(res))\n        .catch(err => console.log(err))\n        getCurrentUserTop('tracks', 5, 'short_term')\n        .then(res => setMonthlyTracks(res))\n        .catch(err => console.log(err))\n    }, []);\n\n    // *** for testing\n    useEffect(() => {\n        console.log(found)\n    },[found]);\n    // ***\n\n    return(\n        <AppContext.Provider\n        value={{\n            monthlyArtists,\n            monthlyTracks,\n            spotifyUserAPI,\n            search,\n            found,\n            setFound,\n            selectedItem,\n            getSelection,\n            getPlaylists,\n            playlists,\n            setPlaylists,\n            getPlaylistTracks,\n            playlistTracks,\n            getCurrentUserTop\n        }}>\n            {props.children}\n        </AppContext.Provider>\n    )\n};","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/context/userProvider.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/Auth.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/spotify.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/forms/authForm.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/views/profile.js",["106"],"import { useEffect } from 'react';\nimport { Switch, Route, Link, useHistory } from 'react-router-dom';\nimport { RecentTracks } from '../components/recentTracks.js';\nimport { RecentArtists } from '../components/recentArtists.js';\nimport { CheckMood } from '../components/checkMood.js';\n\nexport default function Profile(){\n    const history = useHistory();\n\n    useEffect(() => {\n        history.push('/recent_mood_artists')\n    },[]);\n\n    return(\n        <div className='container-main'>\n                <span className='text-sm' > set <span className='text-indigo-300'> mood </span> or view more detailed stats  </span>\n                <br/>\n                <Link to={'/check/moods'}>\n                    <input className='bg-indigo-300 text-cyan-800 btn' type='button' value='mood view'/>\n                </Link>\n                <h1 className='text-sm' style={{color: 'gray'}}> past month top listens </h1>\n                {/* <span className='text-sm'> click to view </span> */}\n                {/* <br/> */}\n                <Link to={`/recent_mood_artists`}> \n                    <input className='bg-cyan-200 text-cyan-800 btn' type='button' value='artists'/>\n                </Link>\n                <Link to={`/recent_mood_tracks`}> \n                    <input className='bg-cyan-200 text-cyan-800 btn' type='button' value='tracks'/>\n                </Link>\n                <Switch>\n                    <Route\n                        path={`/check/moods`}\n                        render={() => \n                            <CheckMood/>\n                    }>\n                    </Route>\n                    <Route \n                        path={`/recent_mood_artists`}\n                        render={() => \n                            <RecentArtists/>\n                    }>\n                    </Route>\n                    <Route\n                        path={`/recent_mood_tracks`}\n                        render={() => \n                            <RecentTracks/>\n                    }>\n                    </Route>\n                </Switch>\n        </div>\n    )\n};","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/views/search.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/views/lists.js",["107","108","109"],"import { useContext, useEffect } from 'react';\nimport { AppContext } from '../components/context/appContext.js';\nimport { UserContext } from '../components/context/userProvider.js';\nimport ResultComp from '../components/resultComp.js';\n\n// friends' lists\nexport default function Lists(){\n    // const {\n\n    // } = useContext(AppContext)\n    const {\n        getFriendsStatus\n    } = useContext(UserContext);\n\n    useEffect(() => {\n        getFriendsStatus()\n    },[])\n\n    return(\n        <div className='resultCompWrapper' >\n            <h1 style={{color: 'gray'}}> Mood lists posted by friends </h1>\n            \n        </div>\n    )\n}","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/recentTracks.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/recentArtists.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/checkMood.js",["110"],"import React, { useState, useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AppContext } from './context/appContext';\nimport { UserContext } from './context/userProvider';\nimport { MoodItem } from './moodItem.js';\n\nexport const CheckMood = () => {\n    const {\n        getCurrentUserTop,\n        getPlaylists,\n        setPlaylists,\n        playlists,\n        found,\n        setFound\n    } = useContext(AppContext);\n    const {\n        shareItem,\n        spotifyUser : {\n            id\n        }\n    } = useContext(UserContext);\n    \n    const history = useHistory();\n\n    const [ view, setView] = useState(false);\n    const [ type, setType ] = useState('artists');\n    const [ amount, setAmount ] = useState(3);\n    const [ timeframe, setTimeframe ] = useState('short_term');\n    const [ mood, setMood ] = useState([]);\n\n    useEffect(() => {\n        // gets top on load\n        getCurrentUserTop(type, amount, timeframe)\n        .then(res => {\n            const { items } = res\n            setMood(items)\n            // pulls only needed metadata from JSON object\n            const forDB = items.map(item => {\n                let selectionParsed\n                if(item.type === 'artist'){\n                    // no test label here..?\n                return {\n                    selectionName: item.name,\n                    genres: item.genres ? item.genres.map(genre => genre) : null,\n                    image: item.images[0] ? item.images[0].url : null,\n                    href: item.external_urls.spotify,\n                    type: item.type\n                }\n                } else if(item.type === 'track'){\n                    // no test label here..?\n                    return {\n                        selectionName: item.album.name,\n                        artists: item.artists.map(artist => artist.name),\n                        image: item.album.images[0] ? item.album.images[0].url : null,\n                        href: item.external_urls.spotify,\n                        type: item.type\n                    }\n                }\n                return selectionParsed\n            })\n        // setFound to the items w only needed data\n            setFound(forDB)\n        })\n        .catch(err => console.log(err))\n        getPlaylists(id)\n        .then(res => {\n            setPlaylists({\n                items: res,\n                total: res.length\n            })\n        })\n        .catch(err => console.log(err))\n        // cleanup function\n        return () => {\n            setMood('')\n        }\n    }, [type, amount, timeframe]);\n\n    const mappedMood = mood && mood.map(item => <MoodItem color={'indigo'} item={item} key={item.id} setFound={setFound}/>);\n    const mappedPlaylists = playlists && playlists.items.map(item => <MoodItem color={'indigo'} item={item} key={item.id}/>);\n\n    return(\n        <div className='grid container-main'>\n        <div className='p-3 pt-4 bg-indigo-800 text-cyan-800 rounded'>\n            <input onClick={() => history.goBack()} className='bg-cerise-700 text-xs text-cyan-50 font-bold btnbold-small' type='button' value='to profile'/>\n            <input onClick={() => setView(prevState => !prevState)} value={`view ${view ? `recent` : `playlists`}`} title='click to check moods of spotify playlists' className='btn text-sm' type='button'/>\n            { !view ?\n            <>\n                <form className='p-3 text-md text-cocoa-900 grid grid-cols-1 gap-3 pr-6 pl-6'>\n                    <select className='bg-indigo-200 text-center text-indigo-800 text-sm rounded-full' onChange={e => setAmount(e.target.value)}>\n                        <option value='3' > top 3 </option>\n                        <option value='5'> top 5 </option>\n                        <option value='8'> top 8 </option>\n                        <option value='10'> top 10 </option>\n                        <option value='15'> top 15 </option>\n                        <option value='20'> top 20 </option>\n                        <option value='25'> top 25 </option>\n                        <option value='30'> top 30 </option>\n                        <option value='40'> top 40 </option>\n                        <option value='50'> top 50 </option>\n                    </select>\n                    <select className='bg-indigo-200 text-center text-sm text-indigo-800 rounded-full' onChange={e => setTimeframe(e.target.value)}>\n                        <option value='short_term' > monthly </option>\n                        <option value='medium_term' > biannual </option>\n                        <option value='long_term'> annual </option>\n                    </select>\n                    <select className='bg-indigo-200 text-center text-indigo-800 text-sm rounded-full' onChange={e => setType(e.target.value)}>\n                        <option value='artists' > artists </option>\n                        <option value='tracks'> tracks </option>\n                    </select>\n                    <input onClick={() => shareItem(found)} className='bg-indigo-600 text-indigo-50 font-medium text-md btn' type='button' title='post as your mood' value='post mood.'/>\n                </form>\n                <p className='text-sm text-cerise-50'> top <span className='text-xl'>{amount}</span> <span className='text-xl'> {type} </span> \n                    {timeframe === 'short_term' && ` these past 30 days`} \n                    {timeframe === 'medium_term' && ' these past 6 months'}\n                    {timeframe === 'long_term' && ' the past year'} \n                </p>\n                <div className=' p-3 rounded'>\n                    {mappedMood || 'the vibe is off. refresh the page.'}\n                </div>\n            </>\n            :\n            // playlist view\n            <div className='p-3 text-md text-cocoa-50 grid grid-cols-1 gap-3 pr-6 pl-6'>\n                <p className='text-sm'> viewing <span className='text-xl'> {playlists.total} </span> playlists </p>\n                {mappedPlaylists}\n            </div>\n            }\n        </div>\n        </div>\n    )\n};","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/moodItem.js",["111"],"import { useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AppContext } from './context/appContext';\n\nexport const MoodItem = props => {\n    const {\n        item,\n        color\n    } = props\n\n    const {\n        getPlaylistTracks,\n        setFound\n    } = useContext(AppContext);\n\n    let selectionParsed\n    \n    // lost on every render warning, but it's intentional\n    useEffect(() => {\n        if(item.type === 'playlist'){\n            selectionParsed = {\n                    name: item.name,\n                    description: item.description ? item.description : null,\n                    owner: item.owner.display_name,\n                    ownerProfile: item.owner.external_urls.spotify,\n                    image: item.images[0] ? item.images[0].url : null,\n                    type: item.type,\n                    href: item.external_urls.spotify,\n                    spotifyId: item.id\n            }\n        }\n    }, []);\n\n    return item.owner ?\n    // for playlist tracks view\n        <div onClick={() => setFound(selectionParsed)} className={`rounded text-xs mb-2 bg-${color}-500 text-cyan-50 p-1`}>\n            <Link to={`/results/${item.id}`}>\n                <span onClick={() => getPlaylistTracks(item.id)}>\n                    { item.images[0].url && <img src={item.images[0].url} alt='playlist'/> }\n                    <p className={`text-cyan-50 text-lg bg-${color}-700 p-1 rounded`}> {item.name} </p>\n                </span>\n            </Link>\n            <div className='p-3' style={{backgroundColor: 'black'}}> \n                <p className='text-xs'> curated by </p>\n                {` ${item.owner.display_name}`}\n                <br/>\n                <a href={`https://open.spotify.com/playlist/${item.id}`}> \n                    <span className='p-3' style={{backgroundColor: 'black'}}>\n                        <span className='font-sans font-medium text-md pr-1'> Listen in Spotify </span>\n                        <i className='fab fa-spotify pt-4' style={{color: '#1DB954', fontSize: '34px'}}/>\n                    </span>\n                </a>\n            </div>\n        </div>\n    :\n    // for reusability w other views\n        <div className={`list-item list-decimal list-inside rounded text-xs mb-2 bg-${color}-500 text-cyan-50 font-semibold text-left p-1`}>\n            {item.images?.[0] && <img src={item.images[0].url} alt='playlist'/>}\n            {item.album && <img src={item.album.images[0].url || `no image available` } alt='playlist'/> }\n            <p className={`text-cyan-50 text-lg text-center font-normal `}> {item.artists && item.artists.map(artist => `${artist.name} -`)} <span className='text-cerise-400'> {item.name} </span> </p>\n            { item.album && <p className={`text-xs rounded p-1  text-cyan-50`}> From '{item.album.name}'</p> }\n            <p className={`text-xs text-center font-normal text-cerise-100`}> {item.genres && item.genres.map(genre => `${genre} `)} </p>\n        </div>\n};","/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/resultDetails.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/userProfile.js",[],"/Users/quinntoncarter/Documents/VSchool/Classwork/module6/cue/client/src/components/resultsProfile.js",["112"],"import { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AppContext } from './context/appContext.js';\nimport { UserContext} from './context/userProvider.js';\n\nexport const ResultsProfile = () => {\n    const {\n        playlistTracks,\n        setFound,\n        found\n    } = useContext(AppContext);\n    const {\n        shareItem\n    } = useContext(UserContext);\n\n    let history = useHistory();\n\n    useEffect(() => {\n        setFound(found)\n        // cleanup function\n        return () => {\n            setFound('')\n        }\n    }, []);\n\n    const mappedTracks = playlistTracks.items && playlistTracks.items.map(item =>\n            <p className='list-item list-decimal list-inside text-cerise-200' key={item.id}> {item.track.name} <span className='text-cerise-50 text-xs'> <br/> from {item.track.album.name}  </span> </p>\n        );\n        return(\n            <div className='p-3 pt-4 pr-6 pl-6 mb-20 bg-indigo-900 rounded text-center'>\n            <button onClick={() => history.goBack()} className='btnbold-small bg-cerise-700 text-sm'> go back </button>\n            <img src={found.image} alt='playlist'/>\n            <div className='container-main text-left p-3 rounded' style={{backgroundColor: 'black'}}>\n                <a className='text-3xl p-3 rounded' href={`https://open.spotify.com/playlist/${found.spotifyId}`}> {found.name}\n                <br/>\n                <span className='text-sm'>click here to listen via <span className='font-sans'> Spotify </span></span>\n                <i className='fab fa-spotify pl-1' style={{color: '#1DB954', fontSize: '34px'}}/>\n                </a>\n                {mappedTracks}\n                <button className='btn bg-indigo-800 mt-7' onClick={() => shareItem(found)}> share playlist </button>\n            </div>\n        </div>\n    )\n};",{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":11,"column":13,"nodeType":"119","messageId":"120","endLine":11,"endColumn":23},{"ruleId":"117","severity":1,"message":"121","line":11,"column":25,"nodeType":"119","messageId":"120","endLine":11,"endColumn":38},{"ruleId":"117","severity":1,"message":"122","line":12,"column":13,"nodeType":"119","messageId":"120","endLine":12,"endColumn":22},{"ruleId":"117","severity":1,"message":"123","line":12,"column":24,"nodeType":"119","messageId":"120","endLine":12,"endColumn":36},{"ruleId":"124","severity":1,"message":"125","line":25,"column":8,"nodeType":"126","endLine":25,"endColumn":14,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"128","line":126,"column":8,"nodeType":"126","endLine":126,"endColumn":10,"suggestions":"129"},{"ruleId":"124","severity":1,"message":"130","line":12,"column":7,"nodeType":"126","endLine":12,"endColumn":9,"suggestions":"131"},{"ruleId":"117","severity":1,"message":"132","line":2,"column":10,"nodeType":"119","messageId":"120","endLine":2,"endColumn":20},{"ruleId":"117","severity":1,"message":"133","line":4,"column":8,"nodeType":"119","messageId":"120","endLine":4,"endColumn":18},{"ruleId":"124","severity":1,"message":"134","line":17,"column":7,"nodeType":"126","endLine":17,"endColumn":9,"suggestions":"135"},{"ruleId":"124","severity":1,"message":"136","line":77,"column":8,"nodeType":"126","endLine":77,"endColumn":33,"suggestions":"137"},{"ruleId":"124","severity":1,"message":"138","line":21,"column":31,"nodeType":"139","endLine":30,"endColumn":14},{"ruleId":"124","severity":1,"message":"140","line":24,"column":8,"nodeType":"126","endLine":24,"endColumn":10,"suggestions":"141"},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'toggleMore' is assigned a value but never used.","Identifier","unusedVar","'setToggleMore' is assigned a value but never used.","'moodLevel' is assigned a value but never used.","'setMoodLevel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setFound'. Either include it or remove the dependency array.","ArrayExpression",["144"],"React Hook useEffect has a missing dependency: 'getCurrentUserTop'. Either include it or remove the dependency array.",["145"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["146"],"'AppContext' is defined but never used.","'ResultComp' is defined but never used.","React Hook useEffect has a missing dependency: 'getFriendsStatus'. Either include it or remove the dependency array.",["147"],"React Hook useEffect has missing dependencies: 'getCurrentUserTop', 'getPlaylists', 'id', 'setFound', and 'setPlaylists'. Either include them or remove the dependency array.",["148"],"Assignments to the 'selectionParsed' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","React Hook useEffect has missing dependencies: 'found' and 'setFound'. Either include them or remove the dependency array.",["149"],"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [setFound, type]",{"range":"162","text":"163"},"Update the dependencies array to be: [getCurrentUserTop]",{"range":"164","text":"165"},"Update the dependencies array to be: [history]",{"range":"166","text":"167"},"Update the dependencies array to be: [getFriendsStatus]",{"range":"168","text":"169"},"Update the dependencies array to be: [type, amount, timeframe, getCurrentUserTop, getPlaylists, id, setFound, setPlaylists]",{"range":"170","text":"171"},"Update the dependencies array to be: [found, setFound]",{"range":"172","text":"173"},[636,642],"[setFound, type]",[4809,4811],"[getCurrentUserTop]",[429,431],"[history]",[464,466],"[getFriendsStatus]",[2570,2595],"[type, amount, timeframe, getCurrentUserTop, getPlaylists, id, setFound, setPlaylists]",[579,581],"[found, setFound]"]